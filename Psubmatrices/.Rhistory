Gmat<-q[grepl(z[i,17],names(q))] ## takes substring from dir1 and compare and extract matrice with matching name from dir 2
matr<-data.frame(matrix(0,nrow=length(Pmat[[1]]),ncol=length(Gmat[[1]])))
colnames(matr)<-names(Gmat[[1]])
colnosto<-numeric(length(Gmat[[1]]))
pnam<-gsub(".","",names(Pmat[[1]]),fixed=TRUE)
gnam<-gsub(".","",names(Gmat[[1]]),fixed=TRUE)
for (m in 1:length(Gmat[[1]])) {
if (sum(grepl(gnam[m],pnam,ignore.case=TRUE))==1) {
matr[,m]<-Pmat[[1]][,grepl(gnam[m],pnam,ignore.case=TRUE)]
colnosto[m]<-match(TRUE,grepl(gnam[m],pnam,ignore.case=TRUE))
print(names(Gmat))
}
else {
colno<-match(gnam[m],pnam)
matr[,m]<-Pmat[[1]][,colno]
}
}
matr<-matr[colnosto,]
modmatsto[[names(Gmat)]]<-matr   #### name matrix with corresponding identifier from other list
}
for (j in 1:length(modmatsto)) {
names(modmatsto)[j]<-paste(names(modmatsto)[j],".csv",sep="")
}
WriteMatList(modmatsto, dir4)
return (modmatsto)
}
Psubmats(dir1,dir2,dir3,dir4)
Psubmats<-function(dir1,dir2,dir3,dir4) { ### dir1 - Pmatrices , Gmatrices, dir3-Pmatindex, dir4-storagelocation
### It is assumed dir1 is the larger matrix and dir 2 the list of smaller ones
modmatsto=list()
p<-MatasList(dir1) ## Creates list of P matrices
q<-MatfromInd(dir2,dir3) ### creates list of relevant G matrices entreted in Pmatindex
z<-read.csv(dir3,stringsAsFactors=FALSE)
for (i in 1:length(z[,1])) {
Pmat<-p[grepl(z[i,1],names(p))]
Gmat<-q[grepl(z[i,17],names(q))] ## takes substring from dir1 and compare and extract matrice with matching name from dir 2
matr<-data.frame(matrix(0,nrow=length(Pmat[[1]]),ncol=length(Gmat[[1]])))
colnames(matr)<-names(Gmat[[1]])
colnosto<-numeric(length(Gmat[[1]]))
pnam<-gsub(".","",names(Pmat[[1]]),fixed=TRUE)
gnam<-gsub(".","",names(Gmat[[1]]),fixed=TRUE)
for (m in 1:length(Gmat[[1]])) {
if (sum(grepl(gnam[m],pnam,ignore.case=TRUE))==1) {
matr[,m]<-Pmat[[1]][,grepl(gnam[m],pnam,ignore.case=TRUE)]
colnosto[m]<-match(TRUE,grepl(gnam[m],pnam,ignore.case=TRUE))
}
else {
colno<-match(gnam[m],pnam)
print(colno)
matr[,m]<-Pmat[[1]][,colno]
}
}
matr<-matr[colnosto,]
modmatsto[[names(Gmat)]]<-matr   #### name matrix with corresponding identifier from other list
}
for (j in 1:length(modmatsto)) {
names(modmatsto)[j]<-paste(names(modmatsto)[j],".csv",sep="")
}
WriteMatList(modmatsto, dir4)
return (modmatsto)
}
Psubmats(dir1,dir2,dir3,dir4)
Psubmats<-function(dir1,dir2,dir3,dir4) { ### dir1 - Pmatrices , Gmatrices, dir3-Pmatindex, dir4-storagelocation
### It is assumed dir1 is the larger matrix and dir 2 the list of smaller ones
modmatsto=list()
p<-MatasList(dir1) ## Creates list of P matrices
q<-MatfromInd(dir2,dir3) ### creates list of relevant G matrices entreted in Pmatindex
z<-read.csv(dir3,stringsAsFactors=FALSE)
for (i in 1:length(z[,1])) {
Pmat<-p[grepl(z[i,1],names(p))]
Gmat<-q[grepl(z[i,17],names(q))] ## takes substring from dir1 and compare and extract matrice with matching name from dir 2
matr<-data.frame(matrix(0,nrow=length(Pmat[[1]]),ncol=length(Gmat[[1]])))
colnames(matr)<-names(Gmat[[1]])
colnosto<-numeric(length(Gmat[[1]]))
pnam<-gsub(".","",names(Pmat[[1]]),fixed=TRUE)
gnam<-gsub(".","",names(Gmat[[1]]),fixed=TRUE)
for (m in 1:length(Gmat[[1]])) {
if (sum(grepl(gnam[m],pnam,ignore.case=TRUE))==1) {
matr[,m]<-Pmat[[1]][,grepl(gnam[m],pnam,ignore.case=TRUE)]
colnosto[m]<-match(TRUE,grepl(gnam[m],pnam,ignore.case=TRUE))
}
else if ((sum(grepl(gnam[m],pnam,ignore.case=TRUE))>1)) {
colno<-match(gnam[m],pnam)
print(colno)
matr[,m]<-Pmat[[1]][,colno]
}
}
matr<-matr[colnosto,]
modmatsto[[names(Gmat)]]<-matr   #### name matrix with corresponding identifier from other list
}
for (j in 1:length(modmatsto)) {
names(modmatsto)[j]<-paste(names(modmatsto)[j],".csv",sep="")
}
WriteMatList(modmatsto, dir4)
return (modmatsto)
}
Psubmats(dir1,dir2,dir3,dir4)
Psubmats<-function(dir1,dir2,dir3,dir4) { ### dir1 - Pmatrices , Gmatrices, dir3-Pmatindex, dir4-storagelocation
### It is assumed dir1 is the larger matrix and dir 2 the list of smaller ones
modmatsto=list()
p<-MatasList(dir1) ## Creates list of P matrices
q<-MatfromInd(dir2,dir3) ### creates list of relevant G matrices entreted in Pmatindex
z<-read.csv(dir3,stringsAsFactors=FALSE)
for (i in 1:length(z[,1])) {
Pmat<-p[grepl(z[i,1],names(p))]
Gmat<-q[grepl(z[i,17],names(q))] ## takes substring from dir1 and compare and extract matrice with matching name from dir 2
matr<-data.frame(matrix(0,nrow=length(Pmat[[1]]),ncol=length(Gmat[[1]])))
colnames(matr)<-names(Gmat[[1]])
colnosto<-numeric(length(Gmat[[1]]))
pnam<-gsub(".","",names(Pmat[[1]]),fixed=TRUE)
gnam<-gsub(".","",names(Gmat[[1]]),fixed=TRUE)
for (m in 1:length(Gmat[[1]])) {
if (sum(grepl(gnam[m],pnam,ignore.case=TRUE))==1) {
matr[,m]<-Pmat[[1]][,grepl(gnam[m],pnam,ignore.case=TRUE)]
colnosto[m]<-match(TRUE,grepl(gnam[m],pnam,ignore.case=TRUE))
}
else if ((sum(grepl(gnam[m],pnam,ignore.case=TRUE))>1)) {
colno<-match(gnam[m],pnam)
print(names(Gmat))
print(colno)
matr[,m]<-Pmat[[1]][,colno]
}
}
matr<-matr[colnosto,]
modmatsto[[names(Gmat)]]<-matr   #### name matrix with corresponding identifier from other list
}
for (j in 1:length(modmatsto)) {
names(modmatsto)[j]<-paste(names(modmatsto)[j],".csv",sep="")
}
WriteMatList(modmatsto, dir4)
return (modmatsto)
}
Psubmats(dir1,dir2,dir3,dir4)
matr
match(gnam[m],pnam)
Gmat
Pmat
match(gnam[4],pnam)
Pmat[[1]][,4]
matr[,4]<-Pmat[[1]][,4]
matr
matr<-data.frame(matrix(0,nrow=length(Pmat[[1]]),ncol=length(Gmat[[1]])))
colnames(matr)<-names(Gmat[[1]])
colnosto<-numeric(length(Gmat[[1]]))
pnam<-gsub(".","",names(Pmat[[1]]),fixed=TRUE)
gnam<-gsub(".","",names(Gmat[[1]]),fixed=TRUE)
for (m in 1:length(Gmat[[1]])) {
if (sum(grepl(gnam[m],pnam,ignore.case=TRUE))==1) {
matr[,m]<-Pmat[[1]][,grepl(gnam[m],pnam,ignore.case=TRUE)]
colnosto[m]<-match(TRUE,grepl(gnam[m],pnam,ignore.case=TRUE))
}
else if ((sum(grepl(gnam[m],pnam,ignore.case=TRUE))>1)) {
colno<-match(gnam[m],pnam)
print(names(Gmat))
print(colno)
matr[,m]<-Pmat[[1]][,colno]
colnosto[m]<-match(gnam[m],pnam)
}
}
matr
Psubmats<-function(dir1,dir2,dir3,dir4) { ### dir1 - Pmatrices , Gmatrices, dir3-Pmatindex, dir4-storagelocation
### It is assumed dir1 is the larger matrix and dir 2 the list of smaller ones
modmatsto=list()
p<-MatasList(dir1) ## Creates list of P matrices
q<-MatfromInd(dir2,dir3) ### creates list of relevant G matrices entreted in Pmatindex
z<-read.csv(dir3,stringsAsFactors=FALSE)
for (i in 1:length(z[,1])) {
Pmat<-p[grepl(z[i,1],names(p))]
Gmat<-q[grepl(z[i,17],names(q))] ## takes substring from dir1 and compare and extract matrice with matching name from dir 2
matr<-data.frame(matrix(0,nrow=length(Pmat[[1]]),ncol=length(Gmat[[1]])))
colnames(matr)<-names(Gmat[[1]])
colnosto<-numeric(length(Gmat[[1]]))
pnam<-gsub(".","",names(Pmat[[1]]),fixed=TRUE)
gnam<-gsub(".","",names(Gmat[[1]]),fixed=TRUE)
for (m in 1:length(Gmat[[1]])) {
if (sum(grepl(gnam[m],pnam,ignore.case=TRUE))==1) {
matr[,m]<-Pmat[[1]][,grepl(gnam[m],pnam,ignore.case=TRUE)]
colnosto[m]<-match(TRUE,grepl(gnam[m],pnam,ignore.case=TRUE))
}
else if ((sum(grepl(gnam[m],pnam,ignore.case=TRUE))>1)) {
colno<-match(gnam[m],pnam)
matr[,m]<-Pmat[[1]][,colno]
colnosto[m]<-match(gnam[m],pnam)
}
}
matr<-matr[colnosto,]
modmatsto[[names(Gmat)]]<-matr   #### name matrix with corresponding identifier from other list
}
for (j in 1:length(modmatsto)) {
names(modmatsto)[j]<-paste(names(modmatsto)[j],".csv",sep="")
}
WriteMatList(modmatsto, dir4)
return (modmatsto)
}
Psubmats(dir1,dir2,dir3,dir4)
rm(list=ls())
Psubmats<-function(dir1,dir2,dir3,dir4) { ### dir1 - Pmatrices , Gmatrices, dir3-Pmatindex, dir4-storagelocation
### It is assumed dir1 is the larger matrix and dir 2 the list of smaller ones
modmatsto=list()
p<-MatasList(dir1) ## Creates list of P matrices
q<-MatfromInd(dir2,dir3) ### creates list of relevant G matrices entreted in Pmatindex
z<-read.csv(dir3,stringsAsFactors=FALSE)
for (i in 1:length(z[,1])) {
Pmat<-p[grepl(z[i,1],names(p))]
Gmat<-q[grepl(z[i,17],names(q))] ## takes substring from dir1 and compare and extract matrice with matching name from dir 2
matr<-data.frame(matrix(0,nrow=length(Pmat[[1]]),ncol=length(Gmat[[1]])))
colnames(matr)<-names(Gmat[[1]])
colnosto<-numeric(length(Gmat[[1]]))
pnam<-gsub(".","",names(Pmat[[1]]),fixed=TRUE)
gnam<-gsub(".","",names(Gmat[[1]]),fixed=TRUE)
for (m in 1:length(Gmat[[1]])) {
if (sum(grepl(gnam[m],pnam,ignore.case=TRUE))==1) {
matr[,m]<-Pmat[[1]][,grepl(gnam[m],pnam,ignore.case=TRUE)]
colnosto[m]<-match(TRUE,grepl(gnam[m],pnam,ignore.case=TRUE))
}
else if ((sum(grepl(gnam[m],pnam,ignore.case=TRUE))>1)) {
colno<-match(gnam[m],pnam)
matr[,m]<-Pmat[[1]][,colno]
colnosto[m]<-match(gnam[m],pnam)
}
}
matr<-matr[colnosto,]
modmatsto[[names(Gmat)]]<-matr   #### name matrix with corresponding identifier from other list
}
for (j in 1:length(modmatsto)) {
names(modmatsto)[j]<-paste(names(modmatsto)[j],".csv",sep="")
}
WriteMatList(modmatsto, dir4)
return (modmatsto)
}
MatfromInd<-function(dir1,dir2){ ## dir1 <- cor matrix folder ##dir 2 PmatIndex file_file
q<-path_file(dir1)
setwd(dir1)
matrices <- dir()
no.mats <- length(q[[1]][grepl(".csv", q[[1]])])
matrix_list <- list()
# this loop reads in each matrix from the folder of .csv files and writes
# them into a list
for (i in 1:no.mats) {
matrix_list[[i]] <- read.csv(q[[1]][grepl(".csv", q[[1]])][i])
}
names(matrix_list) <- matrices[grepl(".csv",q[[1]])]
z<-read.csv(dir2,stringsAsFactors=FALSE)
GPmat<-list()
for (i in 1:length(z[,17])) {
GPmat[[i]]<-matrix_list[grepl(z[i,17],names(matrix_list))][[1]]
names(GPmat)[i]<-z[i,17]
}
return (GPmat) ### return list of list of list
}
matdimcount<-function(list) {
p<-rep(0,length(list))
for (i in 1:length(list)) {
p[i]<-length(list[[i]][[1]])
}
q<-rep(0,max(p))
z<-rep(0,max(p))
for (i in 1:max(p)) {
q[i]<-sum(p>=i)
z[i]<-sum(p==i)
}
return (list(DimNum=p,DimGre=q,DimEqu=z))
}
Trait_append<-function(dir1,dir2) {
q<-read.csv(dir1,stringsAsFactors=FALSE) ###Pmatindex
l<-read.csv(dir2,stringsAsFactors=FALSE) ####MatrixINdexFinal
q$trait.type<-rep(NA,length(q[,1]))
for (i in 1:length(q[,1])) {
q[i,18]<-l[grepl(q[i,17],l[,5]),][8]
}
setwd("C:/Users/s4284361/Documents/GitHub/Rproject")
write.csv("PmatIndex.csv",x=q,row.names=FALSE)
}
Pmatindex<-function(dir) { ## dir ="C:/Users/s4284361/Documents/GitHub/Rproject/Pmatrices"
p<-list.files(path=dir)
p<-p[grepl(".csv",p)] ### Takes only the csv files
q<-read.csv("H:/OrdDatDes.csv",header=TRUE,stringsAsFactors=FALSE) ## Reads in orderdatamatrix
z<-data.frame(matrix(NA,nrow=length(p),ncol=length(q)))
for (i in 1:length(p)) {
z[i,]<-q[grepl(substr(p[[i]],1,7),q[,1]),]
z[i,1]<-substr(p[[i]],1,9)
}
nam<-names(q)
nam[1]<-"Pmatrix"
names(z)<-nam
z$GmatId<-rep(NA,length(z[,16]))
setwd("C:/Users/s4284361/Documents/GitHub/Rproject")
write.csv("Pmatindex.csv",x=z,row.names=FALSE)
}
ExtractTaxon<-function(taxon1,taxon2,list1,list2,trait_type) {
z<-read.csv("G:/GIThub/Pitchers_PTRS2014/Data/MatrixIndexFinal.csv",header=TRUE,stringsAsFactors=FALSE)
#### Various decision trees for the grepl commands to get an appropiate subset of MatrixIndex to work on.
if (missing(trait_type)) {
q<-z[grepl(taxon2,z[,7]),]
q2<-q[grepl(taxon1,q[,6]),]
}
else if (missing(taxon2)) {
q<-z[grepl(taxon1,z[,6]),]
q2<-q[grepl(trait_type,q[,8]),]
}
else if (missing(taxon1)) {
q<-z[grepl(taxon2,z[,7]),]
q2<-q[grepl(trait_type),q[,8]),]
}
else if (missing(taxon1) & missing(taxon2)) {
q2<-z[grepl(trait_type,z[,8]),]
}
else if (missing(taxon1) & missing(trait_type)) {
q2<-z[grepl(taxon2,z[,7]),]
}
else if (missing(taxon2) & missing(trait_type) {
q2<-z[grepl(taxon1,z[,6]),]
}
else if (!(missing(taxon2)|missing(taxon1)|missing(trait_type))) {
q<-z[grepl(taxon2,z[,7]),]
q1<-q[grepl(trait_type,q[,8])]
q2<-q1[grepl(taxon1,q1[,6]),]
}
else {
print("You have not entered any selection criteria")
break
}
if (length(q2[,1]==0)){
print("Sorry, that set of taxons and trait type does not exist in this data")
return NULL
}
else { ### Again usese implicit assumption of constant naming
modlist1<-list1[q2[,5]]
modlist2<-list2[q2[,5]]
return(list(modlist1=modlist1,modlist2=modlist2))
}
WriteMatList<-function(list,dir) {
for (i in 1:length(list)) {
setwd(dir)
write.csv(file=names(list[i]), x=list[[i]],row.names=FALSE)
}
}
MaxnoTraits<- function(list) {
q<-0
for (i in list) {
p<-length(i[1,])
q<-max(p,q)
}
return(q)
}
path_file <- function(dir1,dir2) {
if (missing(dir2)) {
p<-paste(dir1,list.files(path=dir1),sep="/")
return (list(dir1=p))
}
else {
q<-paste(dir2,list.files(path=dir2),sep="/")
p<-paste(dir1,list.files(path=dir1),sep="/")
return (list(dir1=p,dir2=q))
}
}
MatasList<-function(dir1,dir2){
if (missing(dir2)) {
q<-path_file(dir1)
setwd(dir1)
matrices <- dir()
no.mats <- length(q[[1]][!grepl("list", q[[1]])])
matrix_list <- list()
# this loop reads in each matrix from the folder of .csv files and writes
# them into a list
for (i in 1:no.mats) {
matrix_list[[i]] <- read.csv(q[[1]][!grepl("list", q[[1]])][i])
}
names(matrix_list) <- matrices[!grepl("list",q[[1]])]
return(matrix_list)
}
else {
q<-path_file(dir1,dir2)
setwd(dir1)
matrices <- dir()
no.mats <- length(q[[1]][!grepl("list", q[[1]])])
matrix_list <- list()
# this loop reads in each matrix from the folder of .csv files and writes
# them into a list
for (i in 1:no.mats) {
matrix_list[[i]] <- read.csv(q[[1]][!grepl("list", q[[1]])][i])
}
names(matrix_list) <- matrices[!grepl("list",q[[1]])]
#### Now for correlation matrices
## From Pitcher's, create list of matrices for use in R.
setwd(dir2)
matricesc <- dir()
no.matsc <- length(q[[2]][!grepl("list", q[[2]])])
matrix_listc <- list()
# this loop reads in each matrix from the folder of .csv files and writes
# them into a list
for (i in 1:no.matsc) {
matrix_listc[[i]] <- read.csv(q[[2]][!grepl("list", q[[2]])][i])
}
names(matrix_listc) <- matricesc[!grepl("list",q[[2]])]
return (list(matrix_listc=matrix_listc,matrix_list=matrix_list))
}
}
dir1<-"C:/Users/s4284361/Documents/GitHub/Rproject/Pmatrices"
dir2<-"C:/Users/s4284361/Documents/GitHub/Pitchers_PTRS2014/Data/Gmats_Cor_as_CSVs"
dir3<-"C:/Users/s4284361/Documents/GitHub/Rproject/Pmatindex.csv"
dir4<-"C:/Users/s4284361/Documents/GitHub/Rproject/Psubmatrices"
Psubmats(dir1,dir2,dir3,dir4)
modmatsto=list()
p<-MatasList(dir1) ## Creates list of P matrices
q<-MatfromInd(dir2,dir3) ### creates list of relevant G matrices entreted in Pmatindex
z<-read.csv(dir3,stringsAsFactors=FALSE)
Pmat<-p[grepl(z[i,1],names(p))]
Gmat<-q[grepl(z[i,17],names(q))] ## takes substring from dir1 and compare and extract matrice with matching name from dir 2
matr<-data.frame(matrix(0,nrow=length(Pmat[[1]]),ncol=length(Gmat[[1]])))
Gmat<-q[grepl(z[1,17],names(q))] ## takes substring from dir1 and compare and extract matrice with matching name from dir 2
Pmat<-p[grepl(z[1,1],names(p))]
matr<-data.frame(matrix(0,nrow=length(Pmat[[1]]),ncol=length(Gmat[[1]])))
colnames(matr)<-names(Gmat[[1]])
colnosto<-numeric(length(Gmat[[1]]))
pnam<-gsub(".","",names(Pmat[[1]]),fixed=TRUE)
gnam<-gsub(".","",names(Gmat[[1]]),fixed=TRUE)
for (m in 1:length(Gmat[[1]])) {
if (sum(grepl(gnam[m],pnam,ignore.case=TRUE))==1) {
matr[,m]<-Pmat[[1]][,grepl(gnam[m],pnam,ignore.case=TRUE)]
colnosto[m]<-match(TRUE,grepl(gnam[m],pnam,ignore.case=TRUE))
}
else if ((sum(grepl(gnam[m],pnam,ignore.case=TRUE))>1)) {
colno<-match(gnam[m],pnam)
matr[,m]<-Pmat[[1]][,colno]
colnosto[m]<-match(gnam[m],pnam)
}
}
matr<-matr[colnosto,]
modmatsto[[names(Gmat)]]<-matr   #### name matrix with corresponding identifier from other list
modmatsto
for (i in 1:length(z[,1])) {
Pmat<-p[grepl(z[i,1],names(p))]
Gmat<-q[grepl(z[i,17],names(q))] ## takes substring from dir1 and compare and extract matrice with matching name from dir 2
matr<-data.frame(matrix(0,nrow=length(Pmat[[1]]),ncol=length(Gmat[[1]])))
colnames(matr)<-names(Gmat[[1]])
colnosto<-numeric(length(Gmat[[1]]))
pnam<-gsub(".","",names(Pmat[[1]]),fixed=TRUE)
gnam<-gsub(".","",names(Gmat[[1]]),fixed=TRUE)
for (m in 1:length(Gmat[[1]])) {
if (sum(grepl(gnam[m],pnam,ignore.case=TRUE))==1) {
matr[,m]<-Pmat[[1]][,grepl(gnam[m],pnam,ignore.case=TRUE)]
colnosto[m]<-match(TRUE,grepl(gnam[m],pnam,ignore.case=TRUE))
}
else if ((sum(grepl(gnam[m],pnam,ignore.case=TRUE))>1)) {
colno<-match(gnam[m],pnam)
matr[,m]<-Pmat[[1]][,colno]
colnosto[m]<-match(gnam[m],pnam)
}
}
matr<-matr[colnosto,]
modmatsto[[names(Gmat)]]<-matr   #### name matrix with corresponding identifier from other list
}
matr
names(GMat)
names(Gmat)
i
q[grepl(z[i,17],names(q))]
names(p)
names(q)
q$"Con1992.170"
duplicate(names(q))
duplicated(names(q))
names(p)
length(names(p))
length(names(q))
!duplicated(names(q))
match(FALSE,!duplicated(names(q)))
q[[34]]
q[[33]]
q[!duplicated(names(q))]
length(q[!duplicated(names(q))])
names(length(q[!duplicated(names(q))]))
names(q[!duplicated(names(q))])
names(q)
duplicated(q)
Psubmats<-function(dir1,dir2,dir3,dir4) { ### dir1 - Pmatrices , Gmatrices, dir3-Pmatindex, dir4-storagelocation
### It is assumed dir1 is the larger matrix and dir 2 the list of smaller ones
modmatsto=list()
p<-MatasList(dir1) ## Creates list of P matrices
q<-MatfromInd(dir2,dir3) ### creates list of relevant G matrices entreted in Pmatindex
q<-q[!duplicated(names(q))]
z<-read.csv(dir3,stringsAsFactors=FALSE)
for (i in 1:length(z[,1])) {
Pmat<-p[grepl(z[i,1],names(p))]
Gmat<-q[grepl(z[i,17],names(q))] ## takes substring from dir1 and compare and extract matrice with matching name from dir 2
matr<-data.frame(matrix(0,nrow=length(Pmat[[1]]),ncol=length(Gmat[[1]])))
colnames(matr)<-names(Gmat[[1]])
colnosto<-numeric(length(Gmat[[1]]))
pnam<-gsub(".","",names(Pmat[[1]]),fixed=TRUE)
gnam<-gsub(".","",names(Gmat[[1]]),fixed=TRUE)
for (m in 1:length(Gmat[[1]])) {
if (sum(grepl(gnam[m],pnam,ignore.case=TRUE))==1) {
matr[,m]<-Pmat[[1]][,grepl(gnam[m],pnam,ignore.case=TRUE)]
colnosto[m]<-match(TRUE,grepl(gnam[m],pnam,ignore.case=TRUE))
}
else if ((sum(grepl(gnam[m],pnam,ignore.case=TRUE))>1)) {
colno<-match(gnam[m],pnam)
matr[,m]<-Pmat[[1]][,colno]
colnosto[m]<-match(gnam[m],pnam)
}
}
matr<-matr[colnosto,]
modmatsto[[names(Gmat)]]<-matr   #### name matrix with corresponding identifier from other list
}
for (j in 1:length(modmatsto)) {
names(modmatsto)[j]<-paste(names(modmatsto)[j],".csv",sep="")
}
WriteMatList(modmatsto, dir4)
return (modmatsto)
}
Psubmats(dir1,dir2,dir3,dir4)
