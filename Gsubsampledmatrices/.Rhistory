k=k+1
}
else if (length(q[[i]])>T_no) {
randno<-sample(1:length(q[[i]]),T_no)
sto[[1]][[k]]<-q[[i]][randno,randno]
names(sto[[1]])[k]<-strsplit(names(q[i]),".csv")
sto[[2]][[k]]<-p[[i]]
names(sto[[2]])[k]<-strsplit(names(p[i]),".csv")
k=k+1
}
else {
}
}
return (sto)
}
matsubsample(PG,5)
tests<-matsubsample(PG,5)
matdimcount(MatasList(dir4))
tests[[1]]
length(tests[[1]])
matdimcount(MatasList(dir4))
for (i in 1:length(tests[[1]])) {print(length(test[[1]][[i]]==5))}
for (i in 1:length(tests[[1]])) {print(length(tests[[1]][[i]]==5))}
for (i in 1:length(tests[[1]])) {print(length(tests[[1]][[i]]==5))}
tests[[1]][[i]]
length(tests[[1]][[i]])
for (i in 1:length(tests[[1]])) {length(tests[[1]][[i]]==5)}
for (i in 1:length(tests[[1]])) {m[i]<-length(tests[[1]][[i]]==5)}
m
for (i in 1:length(tests[[1]])) {print(length(tests[[1]][[i]])==5)}
PthroughG2<-function(list2) { ## dir1 is the directory of P submatrices and dir2 is the dir containing the G matrices
Pmats<-list2[[1]]
Gmats<-list2[[2]] ### creates list of relevant G matrices entreted in Pmatindex
Gmats<-Gmats[!duplicated(names(Gmats))]
Gmats<-Gmats[sort(names(Gmats))]
ProjPG<-matrix(NA,nrow=length(Pmats),ncol=MaxnoTraits(Pmats))
Peigsto<-matrix(NA,nrow=length(Pmats),ncol=MaxnoTraits(Pmats))
Geigsto<-matrix(NA,nrow=length(Pmats),ncol=MaxnoTraits(Pmats))
nullnames<-rep(0,length(Pmats))
rownames(ProjPG)<-nullnames
rownames(Peigsto)<-nullnames
rownames(Geigsto)<-nullnames
for (i in 1:length(Pmats)) {
Psto<-Pmats[grepl(names(Gmats[i]),names(Pmats))]
Gsto<-Gmats[grepl(names(Gmats[i]),names(Pmats))]
rownames(ProjPG)[i]<-names(Gmats[i])
rownames(Peigsto)[i]<-names(Gmats[i])
rownames(Geigsto)[i]<-names(Gmats[i])
for (j in 1:length(Psto[[1]][,1])){
ProjPG[i,j]<-t((eigen(Psto[[1]])$vectors[,j]))%*%as.matrix(Gsto[[1]])%*%(eigen(Psto[[1]])$vectors[,j])
Peigsto[i,j]<-eigen(Psto[[1]])$values[j]
Geigsto[i,j]<-eigen(Gsto[[1]])$values[j]
}
}
return(list(ProjPG=ProjPG,Peigsto=Peigsto,Geigsto=Geigsto))
}
sto2<-PthroughG2(tests)
Pmats<-list2[[1]]
Pmats<-tests[[1]]
Gmats<-tests[[2]] ### creates list of relevant G matrices entreted in Pmatindex
Gmats<-Gmats[!duplicated(names(Gmats))]
Gmats<-Gmats[sort(names(Gmats))]
ProjPG<-matrix(NA,nrow=length(Pmats),ncol=MaxnoTraits(Pmats))
Peigsto<-matrix(NA,nrow=length(Pmats),ncol=MaxnoTraits(Pmats))
Geigsto<-matrix(NA,nrow=length(Pmats),ncol=MaxnoTraits(Pmats))
nullnames<-rep(0,length(Pmats))
rownames(ProjPG)<-nullnames
rownames(Peigsto)<-nullnames
rownames(Geigsto)<-nullnames
for (i in 1:length(Pmats)) {
Psto<-Pmats[grepl(names(Gmats[i]),names(Pmats))]
Gsto<-Gmats[grepl(names(Gmats[i]),names(Pmats))]
rownames(ProjPG)[i]<-names(Gmats[i])
rownames(Peigsto)[i]<-names(Gmats[i])
rownames(Geigsto)[i]<-names(Gmats[i])
for (j in 1:length(Psto[[1]][,1])){
ProjPG[i,j]<-t((eigen(Psto[[1]])$vectors[,j]))%*%as.matrix(Gsto[[1]])%*%(eigen(Psto[[1]])$vectors[,j])
Peigsto[i,j]<-eigen(Psto[[1]])$values[j]
Geigsto[i,j]<-eigen(Gsto[[1]])$values[j]
}
}
return(list(ProjPG=ProjPG,Peigsto=Peigsto,Geigsto=Geigsto))
}
for (i in 1:length(Pmats)) {
Psto<-Pmats[grepl(names(Gmats[i]),names(Pmats))]
Gsto<-Gmats[grepl(names(Gmats[i]),names(Pmats))]
rownames(ProjPG)[i]<-names(Gmats[i])
rownames(Peigsto)[i]<-names(Gmats[i])
rownames(Geigsto)[i]<-names(Gmats[i])
for (j in 1:length(Psto[[1]][,1])){
ProjPG[i,j]<-t((eigen(Psto[[1]])$vectors[,j]))%*%as.matrix(Gsto[[1]])%*%(eigen(Psto[[1]])$vectors[,j])
Peigsto[i,j]<-eigen(Psto[[1]])$values[j]
Geigsto[i,j]<-eigen(Gsto[[1]])$values[j]
}
}
Psto[[1]][,1]
Psto[[1]][1
]
pst[[1]]
psto[[1]]
Psto[[1]]
Psto
Psto<-Pmats[grepl(names(Gmats[i]),names(Pmats))]
Psto
names(Pmats)
names(Gmats)
matsubsample<-function(PG,T_no) {
q<-PG[[1]]
p<-PG[[2]]
sto<-list(Psub=list(),Gsub=list())
k=1
for (i in 1:length(q)) {
if (length(q[[i]])<T_no) {
}
else if (length(q[[i]])==T_no) {
sto[[1]][[k]]<-p[[i]]
names(sto[[1]])[k]<-strsplit(names(p[i]),".csv")
sto[[2]][[k]]<-q[[i]]
names(sto[[2]])[k]<-strsplit(names(q[i]),".csv")
k=k+1
}
else if (length(q[[i]])>T_no) {
randno<-sample(1:length(q[[i]]),T_no)
sto[[1]][[k]]<-q[[i]][randno,randno]
names(sto[[1]])[k]<-strsplit(names(q[i]),".csv")
sto[[2]][[k]]<-p[[i]]
names(sto[[2]])[k]<-strsplit(names(p[i]),".csv")
k=k+1
}
else {
}
}
return (sto)
}
tests<-matsubsample(PG,T_no)
tests
PthroughG2<-function(tests) { ## dir1 is the directory of P submatrices and dir2 is the dir containing the G matrices
Pmats<-tests[[1]]
Gmats<-tests[[2]] ### creates list of relevant G matrices entreted in Pmatindex
Gmats<-Gmats[!duplicated(names(Gmats))]
Gmats<-Gmats[sort(names(Gmats))]
ProjPG<-matrix(NA,nrow=length(Pmats),ncol=MaxnoTraits(Pmats))
Peigsto<-matrix(NA,nrow=length(Pmats),ncol=MaxnoTraits(Pmats))
Geigsto<-matrix(NA,nrow=length(Pmats),ncol=MaxnoTraits(Pmats))
nullnames<-rep(0,length(Pmats))
rownames(ProjPG)<-nullnames
rownames(Peigsto)<-nullnames
rownames(Geigsto)<-nullnames
for (i in 1:length(Pmats)) {
Psto<-Pmats[grepl(names(Gmats[i]),names(Pmats))]
Gsto<-Gmats[grepl(names(Gmats[i]),names(Pmats))]
rownames(ProjPG)[i]<-names(Gmats[i])
rownames(Peigsto)[i]<-names(Gmats[i])
rownames(Geigsto)[i]<-names(Gmats[i])
for (j in 1:length(Psto[[1]][,1])){
ProjPG[i,j]<-t((eigen(Psto[[1]])$vectors[,j]))%*%as.matrix(Gsto[[1]])%*%(eigen(Psto[[1]])$vectors[,j])
Peigsto[i,j]<-eigen(Psto[[1]])$values[j]
Geigsto[i,j]<-eigen(Gsto[[1]])$values[j]
}
}
return(list(ProjPG=ProjPG,Peigsto=Peigsto,Geigsto=Geigsto))
}
PthroughG2(lists2)
PthroughG2(lists)
PthroughG2(tests)
Pmats<-tests[[1]]
Gmats<-tests[[2]] ### creates list of relevant G matrices entreted in Pmatindex
names(Pmats)
names(Gmats)
ProjPG<-matrix(NA,nrow=length(Pmats),ncol=MaxnoTraits(Pmats))
Peigsto<-matrix(NA,nrow=length(Pmats),ncol=MaxnoTraits(Pmats))
Geigsto<-matrix(NA,nrow=length(Pmats),ncol=MaxnoTraits(Pmats))
nullnames<-rep(0,length(Pmats))
rownames(ProjPG)<-nullnames
rownames(Peigsto)<-nullnames
rownames(Geigsto)<-nullnames
for (i in 1:length(Pmats)) {
Psto<-Pmats[grepl(names(Gmats[i]),names(Pmats))]
Gsto<-Gmats[grepl(names(Gmats[i]),names(Pmats))]
rownames(ProjPG)[i]<-names(Gmats[i])
rownames(Peigsto)[i]<-names(Gmats[i])
rownames(Geigsto)[i]<-names(Gmats[i])
for (j in 1:length(Psto[[1]][,1])){
ProjPG[i,j]<-t((eigen(Psto[[1]])$vectors[,j]))%*%as.matrix(Gsto[[1]])%*%(eigen(Psto[[1]])$vectors[,j])
Peigsto[i,j]<-eigen(Psto[[1]])$values[j]
Geigsto[i,j]<-eigen(Gsto[[1]])$values[j]
}
}
return(list(ProjPG=ProjPG,Peigsto=Peigsto,Geigsto=Geigsto))
}
Psto
Gsto
tests
tests<-matsubsample(PG,5)
for (i in 1:length(tests[[1]])) {print(length(tests[[1]])==5)}
for (i in 1:length(tests[[1]])) {print(length(tests[[1]][[i]])==5)}
for (i in 1:length(tests[[1]])) {print(length(tests[[2]][[i]])==5)}
matsubsample<-function(PG,T_no) {
q<-PG[[1]]
p<-PG[[2]]
sto<-list(Psub=list(),Gsub=list())
k=1
for (i in 1:length(q)) {
if (length(q[[i]])<T_no) {
}
else if (length(q[[i]])==T_no) {
sto[[1]][[k]]<-p[[i]]
names(sto[[1]])[k]<-strsplit(names(p[i]),".csv")
sto[[2]][[k]]<-q[[i]]
names(sto[[2]])[k]<-strsplit(names(q[i]),".csv")
k=k+1
}
else if (length(q[[i]])>T_no) {
randno<-sample(1:length(q[[i]]),T_no)
sto[[1]][[k]]<-q[[i]][randno,randno]
names(sto[[1]])[k]<-strsplit(names(q[i]),".csv")
sto[[2]][[k]]<-p[[i]][randno,randno]
names(sto[[2]])[k]<-strsplit(names(p[i]),".csv")
k=k+1
}
else {
}
}
return (sto)
}
tests<-matsubsample(PG,5)
for (i in 1:length(tests[[1]])) {print(length(tests[[2]][[i]])==5)}
PthroughG2(tests)
temp<-PthroughG2(tests)
boxplot(temp[[2]])
boxplot(temp[[3]])
boxplot(temp[[1]])
boxplot(temp[[3]])
boxplot(temp[[3]])
boxplot(temp[[2]])
boxplot(FiPtG,add=TRUE)
boxplot(FiPtG[[2]],col="grey",boxwex=0.2,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(FiPtG[[3]],add=TRUE, at=1.2:(5+0.2), boxwex=0.2,xaxt='n')
boxplot(tests[[2]],add=TRUE, at=1.4:(5+0.4), boxwex=0.2,xaxt='n')
boxplot)tests[[2]]
boxplot(tests[[2]])
tests[[2]]
boxplot(temp[[2]],add=TRUE, at=1.4:(5+0.4), boxwex=0.2,xaxt='n')
boxplot(temp[[3]],add=TRUE, at=1.6:(5+0.6), boxwex=0.2,xaxt='n')
boxplot(FiPtG[[2]],col="grey",boxwex=0.2,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(FiPtG[[3]],add=TRUE, at=1.2:(5+0.2), boxwex=0.2,xaxt='n')
boxplot(temp[[2]],col="grey",add=TRUE, at=1.4:(5+0.4), boxwex=0.2,xaxt='n')
boxplot(temp[[3]],add=TRUE, at=1.6:(5+0.6), boxwex=0.2,xaxt='n')
hist(temp[[2]])
hist(temp[[3]])
hist(temp[[3]][temp[[3]]<6])
hist(temp[[3]][temp[[3]]<6 & >-4])
hist(temp[[3]][temp[[3]]<6 & temp[[3]]>-4])
hist(temp[[3]][temp[[3]]<6 & temp[[3]]>-2])
hist(temp[[3]][temp[[3]]<4 & temp[[3]]>-2])
hist(temp[[3]][temp[[3]]<3 & temp[[3]]>-2])
hist(temp[[3]][temp[[3]]<3 & temp[[3]]>-1])
hist(temp[[3]][temp[[3]]<3 & temp[[3]]>-1])
hist(temp[[3]])
hist(temp[[2]])
hist(temp[[3]])
hist(temp[[3]][temp[[3]]<3 & temp[[3]]>-1])
hist(temp[[1]])
hist(temp[[1]][temp[[1]]<6])
hist(temp[[1]][temp[[1]]<6 & temp[[1]]>-3])
tests
boxplot(FiPtG[[2]],col="grey",boxwex=0.2,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(FiPtG[[3]],add=TRUE, at=1.2:(5+0.2), boxwex=0.2,xaxt='n')
boxplot(temp[[2]],col="grey",add=TRUE, at=1.4:(5+0.4), boxwex=0.2,xaxt='n')
boxplot(temp[[3]],add=TRUE, at=1.6:(5+0.6), boxwex=0.2,xaxt='n')
boxplot(FiPtG[[2]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(FiPtG[[3]],add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(temp[[2]],col="grey",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
boxplot(temp[[3]],add=TRUE, at=1.6:(5+0.6), boxwex=0.18,xaxt='n')
mypath<-file.path(paste(Gdir),paste("PtG&temp","_boxplot" ,paste("T5n=18"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(FiPtG[[2]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(FiPtG[[3]],add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(temp[[2]],col="grey",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
boxplot(temp[[3]],add=TRUE, at=1.6:(5+0.6), boxwex=0.18,xaxt='n')
dev.off()
boxplot(FiPtG[[2]],col="grey",boxwex=0.18,xaxis=c("1","2","3","4","5"),xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(FiPtG[[3]],add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(temp[[2]],col="grey",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
boxplot(temp[[3]],add=TRUE, at=1.6:(5+0.6), boxwex=0.18,xaxt='n')
mypath<-file.path(paste(Gdir),paste("PtG&temp","_boxplot" ,paste("T5n=18"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(FiPtG[[2]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(FiPtG[[3]],add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(temp[[2]],col="grey",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
boxplot(temp[[3]],add=TRUE, at=1.6:(5+0.6), boxwex=0.18,xaxt='n')
dev.off()
WriteMatList(,"C:/Users/s4284361/Documents/GitHub/Rproject/Psubsampledmatrices")
sto
GP
WriteMatList(tests[[1]],"C:/Users/s4284361/Documents/GitHub/Rproject/Psubsampledmatrices")
WriteMatList(tests[[2]],"C:/Users/s4284361/Documents/GitHub/Rproject/Gsubsampledmatrices")
names(tests[[1]])
lkt<-tests
names(lkt[[1]])<-paste(names(lkt[[1]]),".csv")
names(lkt[[1]])
names(lkt[[1]])<-paste(names(lkt[[1]]),".csv",sep="")
lkt<-tests
names(lkt[[1]])<-paste(names(lkt[[1]]),".csv",sep="")
names(lkt[[1]])
names(lkt[[2]])<-paste(names(lkt[[2]]),".csv",sep="")
lkt<-tests
names(lkt[[1]])<-paste(names(lkt[[1]]),".csv",sep="")
names(lkt[[2]])<-paste(names(lkt[[2]]),".csv",sep="")
WriteMatList(lkt[[1]],"C:/Users/s4284361/Documents/GitHub/Rproject/Psubsampledmatrices")
WriteMatList(lkt[[2]],"C:/Users/s4284361/Documents/GitHub/Rproject/Gsubsampledmatrices")
WriteMatList(lkt[[1]],"C:/Users/s4284361/Documents/GitHub/Rproject/Psubsampledmatrices")
WriteMatList(lkt[[2]],"C:/Users/s4284361/Documents/GitHub/Rproject/Gsubsampledmatrices")
boxplot(temp[[1]])
teemp[[1]]>8
temp[[1]]>8
PG
PG[[1]]$con1992.
temp[[1]]>8
PG[[1]]$con1992.170
PG[[1]]$Con1992.170
PG[[1]]$Con1992.170[[1]]
PG[[1]]$Con1992.170[1,]
eigen(PG[[1]]$Con1992.170)
eigen(PG[[1]]$Con1992.170)$vectors
eigen(PG[[1]]$Con1992.170)$vectors[,1]
t(eigen(PG[[1]]$Con1992.170)$vectors[,1])
t(eigen(PG[[1]]$Con1992.170)$vectors[,1])%*%PG[[2]]$Con1992.170%*%(eigen(PG[[1]]$Con1992.170)
)
t(eigen(PG[[1]]$Con1992.170)$vectors[,1])%*%PG[[2]]$Con1992.170%*%(eigen(PG[[1]]$Con1992.170))
t(eigen(PG[[1]]$Con1992.170)$vectors[,1])%*%(PG[[2]]$Con1992.170)%*%(eigen(PG[[1]]$Con1992.170))
PG[[2]]$Con1992.170
eigen(PG[[1]]$Con1992.170)
1.12/sqrt(2.27*0.41)
boxplot(temp[[1]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(temp[[1]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance")
boxplot(temp[[1]],col="grey",boxwex=0.5,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance")
boxplot(temp[[1]],col="grey",boxwex=0.4,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance")
mypath<-file.path(paste(Gdir),paste("PtG&temp[[1]]","_boxplot" ,paste("T5n=18"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(temp[[1]],col="grey",boxwex=0.4,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance")
dev.off()
ExtractTrait<-function(list2,trait_type) {
q<-list2
z<-read.csv("C:/Users/s4284361/Documents/GitHub/Rproject/Psubmatindex.csv",header=TRUE,stringsAsFactors=FALSE)
Subtrait<-q[grepl(trait_type,z$trait.type)]
return(Subtrait)
}
ExtractTrait(temp[[1]],"S")
ExtractTrait(temp[[1]],"M")
ExtractTrait(PG[[1]],"M")
ExtractTrait(PG[[1]],"S")
length(ExtractTrait(PG[[1]],"S"))
length(PG[[1]])
ExtractTrait(tests[[1]],"S")
length(ExtractTrait(tests[[1]],"S"))
length(ExtractTrait(tests[[1]],"M"))
length(ExtractTrait(tests[[1]],"S"))
taxon1
z<-read.csv("C:/Users/s4284361/Documents/GitHub/Rproject/Psubmatindex.csv",header=TRUE,stringsAsFactors=FALSE)
z$trait.type
levels(z$trait.type)
grepl("S",z$trait.type)
z$trait.typegrepl("S",z$trait.type)
z$trait.type[grepl("S",z$trait.type)]
length(z$trait.type[grepl("S",z$trait.type)])
length(z$trait.type[grepl("M",z$trait.type)])
names(test[[1]])
names(tests[[1]])
grepl(names(tests[[1]]),z$trait.type)
tests[[1]]
names(tests[[1]])
for (i in 1:length(names(tests[[1]]))) {mn[i]<-z[grepl(names(tests[[1]])[i],z$trait.type),]}
mn<-data.frame(matrix(0,nrow=44,ncol=17))
for (i in 1:length(names(tests[[1]]))) {mn[i]<-z[grepl(names(tests[[1]])[i],z$trait.type),]}
warnings()
for (i in 1:length(names(tests[[1]]))) {mn[i,]<-z[grepl(names(tests[[1]])[i],z$trait.type),]}
for (i in 1:length(names(tests[[1]]))) {mn[i,]<-z[grepl(names(tests[[1]])[i],z$trait.type)]}
grepl(names(tests[[1]])[i],z$trait.type)
grepl(names(tests[[1]])[i],z$filename)
for (i in 1:length(names(tests[[1]]))) {mn[i,]<-z[grepl(names(tests[[1]])[i],z$filename)}
for (i in 1:length(names(tests[[1]]))) {mn[i,]<-z[grepl(names(tests[[1]])[i],z$filename),}
for (i in 1:length(names(tests[[1]]))) {mn[i,]<-z[grepl(names(tests[[1]])[i],z$filename),]}
mn
ExtractTrait(mn,"S")
ExtractTrait2<-function(list2,trait_type) {
q<-list2
z<-mn
Subtrait<-q[grepl(trait_type,z$trait.type)]
return(Subtrait)
}
ExtractTrait2(tests[[1]],"s")
ExtractTrait2(tests[[1]],"S")
ExtractTrait2(tests[[1]],"")
q<-tests[[1]]
mn
substrait<-q[grepl(trait_type,mn[,8])]
substrait<-q[grepl("S",mn[,8])]
substrait
length(substrait)
substrait<-q[grepl("M",mn[,8])]
length(substrait)
substrait<-q[grepl("L",mn[,8])]
length(substrait)
for (i in 1:length(names(tests[[1]]))) {mn[i,]<-z[grepl(names(tests[[1]])[i],z$filename),]}
q
subtraitM<-tests[[1]][grepl("L",mn[,8])]
subtraitM
length(subtraitM)
PsubtraitM<-tests[[1]][grepl("M",mn[,8])]
PsubtraitS<-tests[[1]][grepl("S",mn[,8])]
PsubtraitL<-tests[[1]][grepl("L",mn[,8])]
GsubtraitM<-tests[[2]][grepl("M",mn[,8])]
GsubtraitS<-tests[[2]][grepl("S",mn[,8])]
GsubtraitL<-tests[[2]][grepl("L",mn[,8])]
PsubtraitM
subM<-list(PsubtraitM,GsubtraitM)
subS<-list(PsubtraitS,GsubtraitS)
subL<-list(PsubtraitL,GsubtraitL)
PthroughG2(subM)
MPtG<-PthroughG2(subM)
SPtG<-PthroughG2(subS)
LPtg<-PthroughG2(subL)
boxplot(MPtG,col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(SPtG,col="grey",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
boxplot(MPtG[[2]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(SPtG[[2]],col="grey",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
boxplot(LPtG[[2]],add=TRUE, at=1.6:(5+0.6), boxwex=0.18,xaxt='n')
LPtG<-PthroughG2(subL)
boxplot(LPtG[[2]],add=TRUE, at=1.6:(5+0.6), boxwex=0.18,xaxt='n')
boxplot(MPtG[[2]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(SPtG[[2]],add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
boxplot(LPtG[[2]],col="black",add=TRUE, at=1.6:(5+0.6), boxwex=0.18,xaxt='n')
boxplot(MPtG[[3]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(SPtG[[3]],add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
boxplot(LPtG[[3]],col="black",add=TRUE, at=1.6:(5+0.6), boxwex=0.18,xaxt='n')
boxplot(MPtG[[1]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(SPtG[[1]],add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
boxplot(LPtG[[1]],col="black",add=TRUE, at=1.6:(5+0.6), boxwex=0.18,xaxt='n')
boxplot(MPtG[[1]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(SPtG[[1]],add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(LPtG[[1]],col="black",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
boxplot(MPtG[[2]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(SPtG[[2]],add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(LPtG[[2]],col="black",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
boxplot(MPtG[[3]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(SPtG[[3]],add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(LPtG[[3]],col="black",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
dev.off()
mypath<-file.path(paste(Gdir),paste("SplitbyTraitP","_boxplot" ,paste("T5n=18"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(MPtG[[1]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(SPtG[[1]],add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(LPtG[[1]],col="black",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
dev.off()
length(PsubtraitS)
length(PsubtraitM)
length(PsubtraitL)
boxplot(LPtG[[1]],col="white",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(MPtG[[1]],col="grey", add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(SPtG[[1]],col="black",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
legend(x="topright", c("Life History - 7","Morphology - 27","Sexually Selected - 10"), fill=c("white","grey","black"))
boxplot(LPtG[[2]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(MPtG[[2]],add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(SPtG[[2]],col="black",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
legend(x="topright", c("Life History - 7","Morphology - 27","Sexually Selected - 10"), fill=c("white","grey","black"))
mypath<-file.path(paste(Gdir),paste("SplitT_P","_boxplot" ,paste("T5n=44"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(LPtG[[2]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(MPtG[[2]],add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(SPtG[[2]],col="black",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
legend(x="topright", c("Life History - 7","Morphology - 27","Sexually Selected - 10"), fill=c("white","grey","black"))
dev.off()
mypath<-file.path(paste(Gdir),paste("SplitT_G","_boxplot" ,paste("T5n=44"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(LPtG[[3]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(MPtG[[3]],add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(SPtG[[3]],col="black",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
legend(x="topright", c("Life History - 7","Morphology - 27","Sexually Selected - 10"), fill=c("white","grey","black"))
dev.off()
mypath<-file.path(paste(Gdir),paste("SplitT_PtG","_boxplot" ,paste("T5n=44"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(LPtG[[1]],col="white",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(MPtG[[1]],col="grey", add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(SPtG[[1]],col="black",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
legend(x="topright", c("Life History - 7","Morphology - 27","Sexually Selected - 10"), fill=c("white","grey","black"))
dev.off()
boxplot(LPtG[[1]],col="white",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(MPtG[[1]],col="grey", add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(SPtG[[1]],col="darkgrey",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
boxplot(SPtG[[1]],col="gray42",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
mypath<-file.path(paste(Gdir),paste("SplitT_P","_boxplot" ,paste("T5n=44"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(LPtG[[2]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(MPtG[[2]],add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(SPtG[[2]],col="gray42",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
legend(x="topright", c("Life History - 7","Morphology - 27","Sexually Selected - 10"), fill=c("white","grey","gray42"))
dev.off()
mypath<-file.path(paste(Gdir),paste("SplitT_G","_boxplot" ,paste("T5n=44"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(LPtG[[3]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(MPtG[[3]],add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(SPtG[[3]],col="gray42",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
legend(x="topright", c("Life History - 7","Morphology - 27","Sexually Selected - 10"), fill=c("white","grey","gray42"))
dev.off()
mypath<-file.path(paste(Gdir),paste("SplitT_PtG","_boxplot" ,paste("T5n=44"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(LPtG[[1]],col="white",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,4.5))
boxplot(MPtG[[1]],col="grey", add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(SPtG[[1]],col="gray42",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
legend(x="topright", c("Life History - 7","Morphology - 27","Sexually Selected - 10"), fill=c("white","grey","gray42"))
dev.off()
