boxplot(MPtG[[1]],col="grey", add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(SPtG[[1]],col="gray42",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
legend(x="topright", c("Life History - 7","Morphology - 26","Sexually Selected - 10"), fill=c("white","grey","gray42"))
abline(1,0,lty=2)
dev.off()
#### Splitting data by plant/animal taxon
PtaxonA<-tests[[1]][grepl("A",mn[,7])]
PtaxonP<-tests[[1]][grepl("P",mn[,7])]
GtaxonA<-tests[[2]][grepl("A",mn[,7])]
GtaxonP<-tests[[2]][grepl("P",mn[,7])]
subA<-list(PtaxonA,GtaxonA)
subP<-list(PtaxonP,GtaxonP)
APtG<-PthroughG2(subA)
PPtG<-PthroughG2(subP)
DifA<-(APtG[[2]]-APtG[[3]])
DifP<-(PPtG[[2]]-PPtG[[3]])
mypath<-file.path(paste(Gdir),paste("SplitTaxon","_boxplot" ,paste("T5n=43"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(DifA,col="white",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="eig(P) - eig(G)")
boxplot(DifP,col="grey",add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
abline(0,0,lty=2)
legend(x="bottomright", c("Animal -32","Plant -11"), fill=c("white","grey"))
dev.off()
mypath<-file.path(paste(Gdir),paste("SplitTaxonPGP","_boxplot" ,paste("T5n=43"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(APtG[[1]],col="white",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="P'GP")
boxplot(PPtG[[2]],col="grey",add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
abline(0,0,lty=2)
legend(x="topright", c("Animal -32","Plant -11"), fill=c("white","grey"))
dev.off()
nullmat<-matrix(0,nrow=length(test2[[1]][,1]),ncol=15)
nullmat[,1:5]<-test2[[1]]
nullmat[,6:10]<-test2[[2]]
nullmat[,11:15]<-test2[[3]]
anglePG<-function(lists){
angle<-matrix(0,nrow=length(lists[[1]]),ncol=5*length(lists[[1]][[1]][1,]))
for (i in 1:length(lists[[1]])) {
for (j in 1:length(lists[[1]][[1]][1,])){
for (k in 1:5) {
angle[i,(j-1)*5+k]<-acos(t(eigen(lists[[1]][[i]])$vectors[,j])%*%eigen(lists[[2]][[i]])$vectors[,k]/(sqrt(sum(eigen(lists[[1]][[i]])$vectors[,j]*eigen(lists[[1]][[i]])$vectors[,j])*sum(eigen(lists[[2]][[i]])$vectors[,k]*eigen(lists[[2]][[i]])$vectors[,k]))))*180/pi
}
}
}
return(angle)
}
q<-angle
boxplot(q[,1:5],boxwex=0.12,col="grey",at=0.8:4.8,ylab="angle between eigenvectors of P and G",xlab="eigenvector of P")
boxplot(q[,6:10],boxwex=0.12,at=1:5-0.05,add=TRUE,col="white",xaxt='n')
boxplot(q[,11:15],add=TRUE,boxwex=0.12,at=1:5+0.10,col="grey42",xaxt='n')
boxplot(q[,16:20],add=TRUE,boxwex=0.12,at=1:5+0.25,col="tan",xaxt='n')
boxplot(q[,21:25],add=TRUE,boxwex=0.12,at=1:5+0.40,col="azure",xaxt='n')
abline(90,0,lty=2) ### angle for orthogonal matrices
cov2cor(var(q[,c(1,6,11,16,21)])) # angle correlation
nullmat<-matrix(0,nrow=length(test2[[1]][,1]),ncol=15)
nullmat[,1:5]<-test2[[1]]
nullmat[,6:10]<-test2[[2]]
nullmat[,11:15]<-test2[[3]]
nullmat
cov(nullmat)
cov(nullmat[,c(1,2,,6,7,11,12)])
cov(nullmat[,c(1,2,6,7,11,12)])
cor(nullmat[,c(1,2,6,7,11,12)])
5/0.02
10/0.02
10/250
5/0.012
5/415
415/5
permsto<-GPmatcomp(5,83,5,0*diag(5),diag(5), 1000,"C:ABakeSumProj", FALSE,TRUE)
permsto<-GPmatcomp(5,83,5,0*diag(5),diag(5), 1000,"C:ABakeSumProj", FALSE,TRUE)
permsto<-GPmatcomp(5,83,5,0*diag(5),diag(5), 1000,"C:/ABakeSumProj", FALSE,TRUE)
permsto[[1]]
permsto[[2]]
names(tempsto[[1]])
names(permsto[[1]])
permsto<-GPmatcomp(5,83,5,0*diag(5),diag(5), 1000,"C:/ABakeSumProj", FALSE,TRUE)
paste(i)
paste(i)
l<-list()
names(l)<-paste(i)
l<-list(1)
names(l)<-paste(i)
l
GPmatcomp<-function(p,n,r,SigmaA,SigmaE,k,directory,cor, graph) {
LisG<-vector("list",k)
LisP<-vector("list",k)
varmat<-matrix(0,nrow=k,ncol=p)
Peig<-matrix(0,nrow=k,ncol=p)
Gvarmat<-matrix(0,nrow=k,ncol=p)
newmx<-matrix(0,nrow=k,ncol=p)
remssl<-matrix(0,nrow=k,ncol=p)
for (i in 1:k){
Y <- gendat(p,n,r,SigmaA,SigmaE)
Yssp <- ssp(Y,n,r)
remssl[i,]<-reml(Yssp$W,Yssp$B,n,r)$lamB
LisP[[i]]<-var(Y)
names(LisP)[i]<-paste(i)
if (cor==TRUE) {
LisP[[i]]<-cov2cor(LisP[[i]])
}
LisG[[i]]<-manov(Yssp$W, Yssp$B, n,r)$G
names(LisG)[i]<-paste(i)
newmx[i,] <- manov(Yssp$W, Yssp$B, n,r)$eige1
Gvarmat[i,]<-sort(diag(manov(Yssp$W, Yssp$B, n,r)$G),decreasing=TRUE)
varmat[i,]<-sort(diag(var(Y)),decreasing=TRUE)
Peig[i,]<-eigen(LisP[[i]])$values
}
ProjPG<-matrix(0,nrow=k,ncol=p)
for (i in 1:k) {
for (j in 1:p){
ProjPG[i,j]<-t((eigen(LisP[[i]],symmetric=TRUE)$vectors[,j]))%*%LisG[[i]]%*%(eigen(LisP[[i]],symmetric=TRUE)$vectors[,j])
}
}
if (graph==TRUE) {
mypath <- file.path(paste(directory),paste("PGP","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(ProjPG,col="grey",boxwex=0.4,xlab="Eigenvector",ylab="Projection of P through G")
abline(0,0,lty=2)
dev.off()
###boxplot for eigenvaluees and variance of P matrix
mypath <- file.path(paste(directory),paste("Peig&Var","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(Peig,col="grey",boxwex=0.4,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Phenotypic variance")
boxplot(varmat,add=TRUE, at=1.5:(p+0.5), boxwex=0.4,xaxt='n')
abline(mean(diag(SigmaE)+diag(SigmaA)),0,lty=2)
dev.off()
###boxplot for eigenvaluees and variance of G matrix
mypath <- file.path(paste(directory),paste("Geig&Var","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(newmx,col="grey",boxwex=0.4,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Genetic variance")
boxplot(Gvarmat,add=TRUE, at=1.5:(p+0.5), boxwex=0.4,xaxt='n')
abline(mean(diag(SigmaA)),0,lty=2)
dev.off()
# Peig and varmat not calculated using REML, newmx is REML estimate of eigenvalues
#new REML estimates of G var matrix
# Generates eigenvalues for 200 simulated G matrices.
#need to extract unconstrained REML estimates of variances for each trait.
# Need to generate density histograms to see if marchenko-Pastur distribution fits
#Values used from aug13 to generate limiting spectral distribution of eigenvalues for G
#No. lines
# no replicates per line
# no. traits measured
nH <- n-1
nE <- n*(r-1)
c1 <- p/nH
c2 <- p/nE
x <- 1
range <- c(-2,2)
step <- .05
spec <- genspec(c1,c2,x,range,step)
mypath <- file.path(paste(directory),paste("Geig","_Hist" , paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
hist(newmx,breaks=30, freq=FALSE,xlab="Eigenvalues",main='') # HISTOGRAM of G matrix values
lines(spec$argv/5,5*spec$dens)
dev.off()
mypath <- file.path(paste(directory),paste("Peig","_Hist" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
hist(Peig,breaks=30, freq=FALSE,xlab="Eigenvalues") #histogram of Pmatrix values
dev.off()
mypath <- file.path(paste(directory),paste("REMLvsUncon","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(newmx,col="grey",boxwex=0.4,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Genetic Variance")
boxplot(remssl,add=TRUE, at=1.5:(p+0.5), boxwex=0.4,xaxt='n')
abline(mean(diag(SigmaE)+diag(SigmaA)),0,lty=2)
dev.off()
}
else if (missing(graph)){
}
return(list(LisP=LisP,LisG=LisG,remssl=remssl,Peig=Peig,newmx=newmx))
}
permsto<-GPmatcomp(5,83,5,0*diag(5),diag(5), 1000,"C:/ABakeSumProj", FALSE,TRUE)
permsto
permsto[[1]]
WriteMatList(permsto[[1]],"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5/Pmat")
WriteMatList(permsto[[2]],"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5/Gmat")
GPmatcomp<-function(p,n,r,SigmaA,SigmaE,k,directory,cor, graph) {
LisG<-vector("list",k)
LisP<-vector("list",k)
varmat<-matrix(0,nrow=k,ncol=p)
Peig<-matrix(0,nrow=k,ncol=p)
Gvarmat<-matrix(0,nrow=k,ncol=p)
newmx<-matrix(0,nrow=k,ncol=p)
remssl<-matrix(0,nrow=k,ncol=p)
for (i in 1:k){
Y <- gendat(p,n,r,SigmaA,SigmaE)
Yssp <- ssp(Y,n,r)
remssl[i,]<-reml(Yssp$W,Yssp$B,n,r)$lamB
LisP[[i]]<-var(Y)
names(LisP)[i]<-paste(i,".csv",sep="")
if (cor==TRUE) {
LisP[[i]]<-cov2cor(LisP[[i]])
}
LisG[[i]]<-manov(Yssp$W, Yssp$B, n,r)$G
names(LisG)[i]<-paste(i,".csv",sep="")
newmx[i,] <- manov(Yssp$W, Yssp$B, n,r)$eige1
Gvarmat[i,]<-sort(diag(manov(Yssp$W, Yssp$B, n,r)$G),decreasing=TRUE)
varmat[i,]<-sort(diag(var(Y)),decreasing=TRUE)
Peig[i,]<-eigen(LisP[[i]])$values
}
ProjPG<-matrix(0,nrow=k,ncol=p)
for (i in 1:k) {
for (j in 1:p){
ProjPG[i,j]<-t((eigen(LisP[[i]],symmetric=TRUE)$vectors[,j]))%*%LisG[[i]]%*%(eigen(LisP[[i]],symmetric=TRUE)$vectors[,j])
}
}
if (graph==TRUE) {
mypath <- file.path(paste(directory),paste("PGP","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(ProjPG,col="grey",boxwex=0.4,xlab="Eigenvector",ylab="Projection of P through G")
abline(0,0,lty=2)
dev.off()
###boxplot for eigenvaluees and variance of P matrix
mypath <- file.path(paste(directory),paste("Peig&Var","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(Peig,col="grey",boxwex=0.4,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Phenotypic variance")
boxplot(varmat,add=TRUE, at=1.5:(p+0.5), boxwex=0.4,xaxt='n')
abline(mean(diag(SigmaE)+diag(SigmaA)),0,lty=2)
dev.off()
###boxplot for eigenvaluees and variance of G matrix
mypath <- file.path(paste(directory),paste("Geig&Var","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(newmx,col="grey",boxwex=0.4,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Genetic variance")
boxplot(Gvarmat,add=TRUE, at=1.5:(p+0.5), boxwex=0.4,xaxt='n')
abline(mean(diag(SigmaA)),0,lty=2)
dev.off()
# Peig and varmat not calculated using REML, newmx is REML estimate of eigenvalues
#new REML estimates of G var matrix
# Generates eigenvalues for 200 simulated G matrices.
#need to extract unconstrained REML estimates of variances for each trait.
# Need to generate density histograms to see if marchenko-Pastur distribution fits
#Values used from aug13 to generate limiting spectral distribution of eigenvalues for G
#No. lines
# no replicates per line
# no. traits measured
nH <- n-1
nE <- n*(r-1)
c1 <- p/nH
c2 <- p/nE
x <- 1
range <- c(-2,2)
step <- .05
spec <- genspec(c1,c2,x,range,step)
mypath <- file.path(paste(directory),paste("Geig","_Hist" , paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
hist(newmx,breaks=30, freq=FALSE,xlab="Eigenvalues",main='') # HISTOGRAM of G matrix values
lines(spec$argv/5,5*spec$dens)
dev.off()
mypath <- file.path(paste(directory),paste("Peig","_Hist" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
hist(Peig,breaks=30, freq=FALSE,xlab="Eigenvalues") #histogram of Pmatrix values
dev.off()
mypath <- file.path(paste(directory),paste("REMLvsUncon","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(newmx,col="grey",boxwex=0.4,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Genetic Variance")
boxplot(remssl,add=TRUE, at=1.5:(p+0.5), boxwex=0.4,xaxt='n')
abline(mean(diag(SigmaE)+diag(SigmaA)),0,lty=2)
dev.off()
}
else if (missing(graph)){
}
return(list(LisP=LisP,LisG=LisG,remssl=remssl,Peig=Peig,newmx=newmx))
}
permsto<-GPmatcomp(5,83,5,0*diag(5),diag(5), 1000,"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5/Graphs", FALSE,TRUE)
WriteMatList(permsto[[1]],"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5/Pmat")
WriteMatList(permsto[[2]],"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5/Gmat")
names(permsto)
setwd("C:\Users\s4284361\Documents\GitHub\Rproject\Simulatedstorage\p=5")
setwd("C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5")
?write.csv
paste(1:5)
write.csv(permsto[[4]],row.names=FALSE,col.names=paste(1:5),file="SimulatedPeigenvalues.csv")
warnings()
permsto[[2]]
permsto[[4]]
permsto[[4]][1:10,]
write.csv(permsto[[4]],row.names=FALSE,col.names=TRUE,file="SimulatedPeigenvalues.csv")
write.csv(permsto[[4]],row.names=FALSE,file="SimulatedPeigenvalues.csv")
write.csv(permsto[[5]],row.names=FALSE,file="SimulatedGeigenvalues.csv")
permsto<-GPmatcomp(10,166,5,0*diag(5),diag(5), 1000,"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5/Graphs", FALSE,TRUE)
permsto<-GPmatcomp(10,166,5,0*diag(10),diag(10), 1000,"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5/Graphs", FALSE,TRUE)
WriteMatList(permsto[[1]],"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5/Pmat")
riteMatList(permsto[[2]],"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5/Gmat")
WriteMatList(permsto[[2]],"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5/Gmat")
setwd("C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5")
WriteMatList(permsto[[1]],"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=10/Pmat")
WriteMatList(permsto[[2]],"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=10/Gmat")
setwd("C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5")
write.csv(permsto[[4]],row.names=FALSE,file="SimulatedPeigenvalues.csv")
write.csv(permsto[[5]],row.names=FALSE,file="SimulatedGeigenvalues.csv")
setwd("C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=10")
write.csv(permsto[[4]],row.names=FALSE,file="SimulatedPeigenvalues.csv")
write.csv(permsto[[5]],row.names=FALSE,file="SimulatedGeigenvalues.csv")
permsto<-GPmatcomp(5,83,5,0*diag(5),diag(5), 1000,"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5/Graphs", FALSE,TRUE)
WriteMatList(permsto[[1]],"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5/Pmat")
riteMatList(permsto[[2]],"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5/Gmat")
WriteMatList(permsto[[2]],"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5/Gmat")
setwd("C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=5")
write.csv(permsto[[4]],row.names=FALSE,file="SimulatedPeigenvalues.csv")
write.csv(permsto[[5]],row.names=FALSE,file="SimulatedGeigenvalues.csv")
permsto<-GPmatcomp(10,166,5,0*diag(10),diag(10), 1000,"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=10/Graphs", FALSE,TRUE)
WriteMatList(permsto[[1]],"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=10/Pmat")
WriteMatList(permsto[[2]],"C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=10/Gmat")
setwd("C:/Users/s4284361/Documents/GitHub/Rproject/Simulatedstorage/p=10")
write.csv(permsto[[4]],row.names=FALSE,file="SimulatedPeigenvalues.csv")
write.csv(permsto[[5]],row.names=FALSE,file="SimulatedGeigenvalues.csv")
PG<-PaG() ##### not geme2001.473 was earlier removed. Rerunning everything includes it. Must be removed for later functions to work.
tests<-matsubsample(PG,5)
test2<-PthroughG2(tests)
lkt<-tests
names(lkt[[1]])<-paste(names(lkt[[1]]),".csv",sep="")
names(lkt[[2]])<-paste(names(lkt[[2]]),".csv",sep="")
WriteMatList(lkt[[1]],"C:/Users/s4284361/Documents/GitHub/Rproject/Psubsampledmatrices")
WriteMatList(lkt[[2]],"C:/Users/s4284361/Documents/GitHub/Rproject/Gsubsampledmatrices")
Gdir<-"C:/Users/s4284361/Documents/GitHub/Rproject/Graphs"
mypath<-file.path(paste(Gdir),paste("P&G","_boxplot" ,paste("T5n=43"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(test2[[3]],col="white",boxwex=0.25,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance")
boxplot(test2[[2]],col="grey",add=TRUE, at=1.3:(5+0.3), boxwex=0.25,xaxt='n')
legend(x="topright", c("Genetic Correlation","Phenotypic Correlation"), fill=c("white","grey"))
dev.off()
mypath<-file.path(paste(Gdir),paste("PthroughG","_boxplot" ,paste("T5n=43"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(test2[[1]],col="white",boxwex=0.25,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance")
legend(x="topright", c("P%*%G%*%P"), fill=c("White"))
dev.off()
mypath<-file.path(paste(Gdir),paste("All3","_boxplot" ,paste("T5n=43"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(test2[[2]],col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Scaled Phenotypic/Genetic variance",ylim=c(0,max(test2[[1]])))
boxplot(test2[[3]],add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(test2[[1]],col="gray42",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
legend(x="topright", c("Phenotypic correlation","Genotypic correlation","Projection of P through G"), fill=c("white","grey","gray42"))
dev.off()
z<-(test2$Peigsto-test2$Geigsto)
mypath<-file.path(paste(Gdir),paste("difP&G","_boxplot" ,paste("T5n=43"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(z,col="grey",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Difference in scaled variance")
legend(x="topleft", c("eig(P)-eig(G)"), fill=c("grey"))
abline(0,0,lty=2)
dev.off()
##Differences between P and G for Trait types
mn<-data.frame(matrix(0,nrow=43,ncol=16))
z<-read.csv("C:/Users/s4284361/Documents/GitHub/Rproject/Psubmatindex.csv",header=TRUE,stringsAsFactors=FALSE)
for (i in 1:length(names(tests[[1]]))) {mn[i,]<-z[grepl(names(tests[[1]])[i],z$filename),]}
PsubtraitM<-tests[[1]][grepl("M",mn[,8])]
PsubtraitS<-tests[[1]][grepl("S",mn[,8])]
PsubtraitL<-tests[[1]][grepl("L",mn[,8])]
GsubtraitM<-tests[[2]][grepl("M",mn[,8])]
GsubtraitS<-tests[[2]][grepl("S",mn[,8])]
GsubtraitL<-tests[[2]][grepl("L",mn[,8])]
subM<-list(PsubtraitM,GsubtraitM)
subS<-list(PsubtraitS,GsubtraitS)
subL<-list(PsubtraitL,GsubtraitL)
MPtG<-PthroughG2(subM)
SPtG<-PthroughG2(subS)
LPtG<-PthroughG2(subL)
DifM<-(MPtG[[2]]-MPtG[[3]])
DifS<-(SPtG[[2]]-SPtG[[3]])
DifL<-(LPtG[[2]]-LPtG[[3]])
mypath<-file.path(paste(Gdir),paste("SplitT_P","_boxplot" ,paste("T5n=43"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(DifL,col="white",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="eig(P) - eig(G)")
boxplot(DifM,col="grey",add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(DifS,col="gray42",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
abline(0,0,lty=2)
legend(x="bottomright", c("Life History - 7","Morphology - 26","Sexually Selected - 10"), fill=c("white","grey","gray42"))
dev.off()
### INcluding compiled dataset
z<-(test2$Peigsto-test2$Geigsto)
mypath<-file.path(paste(Gdir),paste("SplitT_P&All","_boxplot" ,paste("T5n=43"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(DifL,col="white",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="eig(P) - eig(G)",ylim=c(-1.7,1))
boxplot(DifM,col="grey",add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(DifS,col="gray42",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
boxplot(z,col="black",add=TRUE, at=1.6:(5+0.6), boxwex=0.18, xaxt='n')
abline(0,0,lty=2)
legend(x="bottomright", c("Life History - 7","Morphology - 26","Sexually Selected - 10", "All -43"), fill=c("white","grey","gray42","black"))
dev.off()
mypath<-file.path(paste(Gdir),paste("SplitT_PtG","_boxplot" ,paste("T5n=43"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(LPtG[[1]],col="white",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="P'GP",ylim=c(min(MPtG[[1]][,5]),max(MPtG[[1]][,1])))
boxplot(MPtG[[1]],col="grey", add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
boxplot(SPtG[[1]],col="gray42",add=TRUE, at=1.4:(5+0.4), boxwex=0.18,xaxt='n')
legend(x="topright", c("Life History - 7","Morphology - 26","Sexually Selected - 10"), fill=c("white","grey","gray42"))
abline(1,0,lty=2)
dev.off()
#### Splitting data by plant/animal taxon
PtaxonA<-tests[[1]][grepl("A",mn[,7])]
PtaxonP<-tests[[1]][grepl("P",mn[,7])]
GtaxonA<-tests[[2]][grepl("A",mn[,7])]
GtaxonP<-tests[[2]][grepl("P",mn[,7])]
subA<-list(PtaxonA,GtaxonA)
subP<-list(PtaxonP,GtaxonP)
APtG<-PthroughG2(subA)
PPtG<-PthroughG2(subP)
DifA<-(APtG[[2]]-APtG[[3]])
DifP<-(PPtG[[2]]-PPtG[[3]])
mypath<-file.path(paste(Gdir),paste("SplitTaxon","_boxplot" ,paste("T5n=43"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(DifA,col="white",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="eig(P) - eig(G)")
boxplot(DifP,col="grey",add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
abline(0,0,lty=2)
legend(x="bottomright", c("Animal -32","Plant -11"), fill=c("white","grey"))
dev.off()
mypath<-file.path(paste(Gdir),paste("SplitTaxonPGP","_boxplot" ,paste("T5n=43"), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(APtG[[1]],col="white",boxwex=0.18,xaxis=NULL,xlab="Trait or Eigenvector",ylab="P'GP")
boxplot(PPtG[[2]],col="grey",add=TRUE, at=1.2:(5+0.2), boxwex=0.18,xaxt='n')
abline(0,0,lty=2)
legend(x="topright", c("Animal -32","Plant -11"), fill=c("white","grey"))
dev.off()
nullmat<-matrix(0,nrow=length(test2[[1]][,1]),ncol=15)
nullmat[,1:5]<-test2[[1]]
nullmat[,6:10]<-test2[[2]]
nullmat[,11:15]<-test2[[3]]
test2
tempsto<-TWidomTest("C:/Users/s4284361/Documents/GitHub/Rproject/nsubmats.csv",5,5,1000,"C:/Users/s4284361/Documents/GitHub/Rproject", graph=FALSE,test2[[2]],FALSE)
fix(sizeddata)
tempsto
tempsto[[1]]
RTW<-rtw(10000,1)
m<-hist(RTW,breaks=50, xlab="TW statistic",ylab="Frequency",main=NULL,freq=FALSE)
abline(v=qtw(0.05,lower.tail=FALSE),lty=2)
for (i in 1:length(tempsto[[1]])) {
points(type="l",x=c(tempsto[[1]][i],tempsto[[1]][i]),y=c(max(m$density)-(max(m$density)-min(m$density))/12,max(m$density)))
}
m<-hist(RTW,breaks=50, xlab="TW statistic",ylab="Frequency",main=NULL,freq=FALSE,ylim=c(0,0.4))
abline(v=qtw(0.05,lower.tail=FALSE),lty=2)
for (i in 1:length(tempsto[[1]])) {
points(type="l",x=c(tempsto[[1]][i],tempsto[[1]][i]),y=c(max(m$density)-(max(m$density)-min(m$density))/12,max(m$density)))
}
for (i in 1:length(tempsto[[1]])) {
points(type="l",x=c(tempsto[[1]][i],tempsto[[1]][i]),y=c(max(m$density)-(max(m$density)-min(m$density))/12,max(m$density)+(max(m$density)-min(m$density))))
}
m<-hist(RTW,breaks=50, xlab="TW statistic",ylab="Frequency",main=NULL,freq=FALSE,ylim=c(0,0.4))
abline(v=qtw(0.05,lower.tail=FALSE),lty=2)
for (i in 1:length(tempsto[[1]])) {
points(type="l",x=c(tempsto[[1]][i],tempsto[[1]][i]),y=c(max(m$density),max(m$density)+(max(m$density)-min(m$density))))
}
m<-hist(RTW,breaks=50, xlab="TW statistic",ylab="Frequency",main=NULL,freq=FALSE,ylim=c(0,0.38))
m<-hist(RTW,breaks=50, xlab="TW statistic",ylab="Frequency",main=NULL,freq=FALSE,ylim=c(0,0.4))
for (i in 1:length(tempsto[[1]])) {
points(type="l",x=c(tempsto[[1]][i],tempsto[[1]][i]),y=c(max(m$density)+0.5*(max(m$density)-min(m$density)),max(m$density)+(max(m$density)-min(m$density))))
}
mx<-max(m$density)
mn<-min(m$density)
sub<-mx-mn
points(type="l",x=c(tempsto[[1]][i],tempsto[[1]][i]),y=c(mx+0.5*(sub),mx+sub))
points(type="l",x=c(tempsto[[1]][i],tempsto[[1]][i]),y=c(mx,mx+sub))
for (i in 1:length(tempsto[[1]])) {
points(type="l",x=c(tempsto[[1]][i],tempsto[[1]][i]),y=c(mx,mx+sub))
}
for (i in 1:length(tempsto[[1]])) {
points(type="l",x=c(tempsto[[1]][i],tempsto[[1]][i]),y=c(mx+0.5*sub,mx+sub))
}
m<-hist(RTW,breaks=50, xlab="TW statistic",ylab="Frequency",main=NULL,freq=FALSE,ylim=c(0,0.4))
abline(v=qtw(0.05,lower.tail=FALSE),lty=2)
mx<-max(m$density)
mn<-min(m$density)
sub<-mx-mn
for (i in 1:length(tempsto[[1]])) {
points(type="l",x=c(tempsto[[1]][i],tempsto[[1]][i]),y=c(mx+0.5*sub,mx+sub))
}
for (i in 1:length(tempsto[[1]])) {
points(type="l",x=c(tempsto[[1]][i],tempsto[[1]][i]),y=c(mx+0.05*sub,mx+0.1*sub))
}
m<-hist(RTW,breaks=50, xlab="TW statistic",ylab="Frequency",main=NULL,freq=FALSE,ylim=c(0,0.38))
abline(v=qtw(0.05,lower.tail=FALSE),lty=2)
mx<-max(m$density)
mn<-min(m$density)
sub<-mx-mn
for (i in 1:length(tempsto[[1]])) {
points(type="l",x=c(tempsto[[1]][i],tempsto[[1]][i]),y=c(mx+0.05*sub,mx+0.1*sub))
}
for (i in 1:length(tempsto[[1]])) {
points(type="l",x=c(tempsto[[1]][i],tempsto[[1]][i]),y=c(mx+0.05*sub,mx+0.15*sub))
}
?text
names(tempsto)
tempsto[[4]][[1]]
tempsto[[4]]
tempsto[[5]]
tempsto[[5]][[1]]
hist(tempsto[[5]][[1]],breaks=50)
lines(density(RTW))
hist(tempsto[[5]][[1]],breaks=50,frew=FALSE)
hist(tempsto[[5]][[1]],breaks=50,freq=FALSE)
lines(density(RTW))
PonNconv("C:/Users/s4284361/Documents/GitHub/Rproject/nsubmats.csv",5,5)
PonNconv(5,5,"C:/Users/s4284361/Documents/GitHub/Rproject/nsubmats.csv")
hist(tempsto[[5]][[43]],breaks=50,frew=FALSE)
lines(density(RTW))
hist(tempsto[[5]][[43]],breaks=50,freq=FALSE)
lines(density(RTW))
hist(RTW)
hist(RTW,breaks=5)
hist(RTW,breaks=50)
hist(tempsto[[5]][[1]],breaks=50)
hist(tempsto[[5]][[2]],breaks=50)
hist(tempsto[[5]][[3]],breaks=50)
hist(tempsto[[5]][[4]],breaks=50)
hist(tempsto[[5]][[5]],breaks=50)
hist(tempsto[[5]][[6]],breaks=50)
hist(tempsto[[5]][[7]],breaks=50)
hist(tempsto[[5]][[8]],breaks=50)
hist(tempsto[[5]][[9]],breaks=50)
hist(tempsto[[5]][[9]],breaks=50)
hist(tempsto[[5]][[9]],breaks=50,freq=FALSE)
lines(density(RTW))
hist(tempsto[[5]][[8]],breaks=50)
lines(density(RTW))
hist(tempsto[[5]][[5]],breaks=50,freq=FALSE)
lines(density(RTW))
