remssl<-matrix(0,nrow=k,ncol=p)
CorGeig<-matrix(0,nrow=k,ncol=p)
for (i in 1:k){
Y <- gendat(p,n,r,SigmaA,SigmaE)
Yssp <- ssp(Y,n,r)
remssl[i,]<-reml(Yssp$W,Yssp$B,50,r)$lamB
LisP[[i]]<-var(Y)
LisG[[i]]<-manov(Yssp$W, Yssp$B, n,r)$G
newmx[i,] <- manov(Yssp$W, Yssp$B, n,r)$eige1
CorGeig[i,]<-eigen(cov2cor(manov(Yssp$W, Yssp$B, n,r)$G))$values
Gvarmat[i,]<-sort(diag(manov(Yssp$W, Yssp$B, n,r)$G),decreasing=TRUE)
varmat[i,]<-sort(diag(var(Y)),decreasing=TRUE)
Peig[i,]<-eigen(var(Y))$values
}
ProjPG<-matrix(0,nrow=k,ncol=p)
for (i in 1:k) {
for (j in 1:p){
ProjPG[i,j]<-t((eigen(LisP[[i]])$vectors[,j]))%*%LisG[[i]]%*%(eigen(LisP[[i]])$vectors[,j])
}
}
mypath <- file.path(paste(directory),paste("PGP","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(ProjPG,col="grey",boxwex=0.4,xlab="Eigenvector",Ylab="Projection of P through G")
abline(0,0,lty=2)
dev.off()
###boxplot for eigenvaluees and variance of P matrix
mypath <- file.path(paste(directory),paste("Peig&Var","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(Peig,col="grey",boxwex=0.4,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Phenotypic variance")
boxplot(varmat,add=TRUE, at=1.5:(p+0.5), boxwex=0.4,xaxt='n')
abline(mean(diag(SigmaE)+diag(SigmaA)),0,lty=2)
dev.off()
###boxplot for eigenvaluees and variance of G matrix
mypath <- file.path(paste(directory),paste("Geig&Var","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(newmx,col="grey",boxwex=0.4,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Genetic variance")
boxplot(Gvarmat,add=TRUE, at=1.5:(p+0.5), boxwex=0.4,xaxt='n')
abline(mean(diag(SigmaA)),0,lty=2)
dev.off()
# Peig and varmat not calculated using REML, newmx is REML estimate of eigenvalues
#new REML estimates of G var matrix
# Generates eigenvalues for 200 simulated G matrices.
#need to extract unconstrained REML estimates of variances for each trait.
# Need to generate density histograms to see if marchenko-Pastur distribution fits
#Values used from aug13 to generate limiting spectral distribution of eigenvalues for G
#No. lines
# no replicates per line
# no. traits measured
nH <- n-1
nE <- n*(r-1)
c1 <- p/nH
c2 <- p/nE
x <- 1
range <- c(-2,2)
step <- .05
spec <- genspec(c1,c2,x,range,step)
mypath <- file.path(paste(directory),paste("Geig","_Hist" , paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
hist(newmx,breaks=30, freq=FALSE,xlab="Eigenvalues",main='') # HISTOGRAM of G matrix values
lines(spec$argv/5,5*spec$dens)
dev.off()
mypath <- file.path(paste(directory),paste("Peig","_Hist" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
hist(Peig,breaks=30, freq=FALSE,xlab="Eigenvalues") #histogram of Pmatrix values
dev.off()
mypath <- file.path(paste(directory),paste("CorGeig","_Hist" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
hist(CorGeig,breaks=30, freq=FALSE,xlab="Eigenvalues") #histogram of Pmatrix values
dev.off()
mypath <- file.path(paste(directory),paste("REMLvsUncon","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(newmx,col="grey",boxwex=0.4,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Genetic Variance")
boxplot(remssl,add=TRUE, at=1.5:(p+0.5), boxwex=0.4,xaxt='n')
abline(mean(diag(SigmaE)+diag(SigmaA)),0,lty=2)
dev.off()
return(list(LisP=LisP,LisG=LisG,remssl=remssl))
}
GPmatcomp(10,50,5,0*diag(10),diag(10),200,"H:/2014 summer project/Rscripts")
?cov2cor
library("MASS")
###Start of Iain's code#####
genspec <- function(c1,c2,x,range,step) {
# compute limiting density of eigenvalues of H - xE for n_1 H ~
# W_p(n_1,I) independent of n_2 E ~ W_p(n_2,I) with c1 = lim p/n,
# c2 = lim p/n2.  range = c(lo,hi) is range of z-values on real
# axis with stepwidth step
b1 <- 1+c2*x - (x+c1)
b2 <- -x*(c1 + c2 - c1*c2)
argv <- seq( range[1], range[2], by = step)
npts <- length(argv)
dens <- rep(0,npts)
for (i in  1:npts) {
z <- argv[i]
a0 <- -1
a1 <- -z + b1
a2 <- -c1*z + c2*x*z + b2
a3 <- c1*c2*z*x
av <- c(a0,a1,a2,a3)
dens[i] <- max(Im(polyroot(av)))/pi
}
list( argv=argv, dens=dens)
}
manov <- function(W,B,n,r){
# compute reml estimates Bhat and What of effect and error
# covariance matrices and eigenvalues lamB of Bhat. Balanced case,
# n = no. groups, r = no. reps per group
# method avoids evals of W^{-1}B
return(list(eige1=(eigen(B-W)$values/r),G=(B-W)/r))
}
ssp <- function(Y,n,r){
# compute within-group and between-group mean square matrices for
# balanced case, n = no. groups, r = no. reps per group
gp <- rep(1:n, each=r)
p <- dim(Y)[2]
Ymeans <- matrix(0, nrow = n, ncol = p)
E      <- matrix(0, nrow = p, ncol = p)
for (i in 1:n){
Yt <- Y[gp==i,]
Ymeans[i,] <- colMeans(Yt)
E <- E + (r-1)*cov(Yt)
}
nE <- n*(r-1)
return( list(W=E/nE, B = r*cov(Ymeans)))
}
reml <- function(W,B,n,r){
# compute reml estimates Bhat and What of effect and error
# covariance matrices and eigenvalues lamB of Bhat. Balanced case,
# n = no. groups, r = no. reps per group
# method avoids evals of W^{-1}B
L <- solve(chol(W))
gen <- eigen( t(L) %*% B %*% L, symmetric= TRUE)
lamhat <- gen$values
P <- solve(t(L)) %*% gen$vectors
tlam <- ifelse( lamhat > 1, lamhat-1, 0)
Bhat <- P %*% diag(tlam) %*% t(P) /r
lamB <- eigen( Bhat, only.values=TRUE)$values
nE <- n*(r-1)
nH <- n-1
What <- ( nH*(B - r*Bhat) + nE*W )/(nH + nE)
list( Bhat=Bhat, What=What, lamB=lamB)
}
## end of Iain's code
##New generate data funtion which can handle case with no random effect for line
## modified from code supplied by Iain (personal communication)
gendat <- function(p,n,r, SigmaA, SigmaE){
# generate balanced one-way MANOVA with random effects covariance
# SigmaA and error covariance SigmaE
# p-dimensional observations on n groups with r replicates per group
gp <- rep(1:n, each=r)
zero <- rep(0, p)
if (all(diag(SigmaA)==zero)) {
error <- mvrnorm(n*r, zero, SigmaE)
return(gendat=error)
}
else {
randef <- mvrnorm(n, zero, SigmaA)
vcpt <- randef[gp,]       # repeat each random effect r times
error <- mvrnorm(n*r, zero, SigmaE)
return( gendat = vcpt + error)
}
}
###### Function which can take p=no. traits, n=no. lines, r = no. reps in each line, SigmaA=line randomeffect covariance matrix, SigmaE=error covariance matrix,k=no. simulated datasets
###### simulated data is made a multivariate normal with covariance matrix equal to either SigmaA or SigmaE to get differ
###### Directory is the location wher you wish the graphs to be saved. It needs ti be done as a string. Eg if you wish to save to C:/testfolder you must input "C:/testfolder"
## Start of work by Alex
GPmatcomp<-function(p,n,r,SigmaA,SigmaE,k,directory) {
LisG<-vector("list",k)
LisP<-vector("list",k)
varmat<-matrix(0,nrow=k,ncol=p)
Peig<-matrix(0,nrow=k,ncol=p)
Gvarmat<-matrix(0,nrow=k,ncol=p)
newmx<-matrix(0,nrow=k,ncol=p)
remssl<-matrix(0,nrow=k,ncol=p)
CorGeig<-matrix(0,nrow=k,ncol=p)
for (i in 1:k){
Y <- gendat(p,n,r,SigmaA,SigmaE)
Yssp <- ssp(Y,n,r)
remssl[i,]<-reml(Yssp$W,Yssp$B,50,r)$lamB
LisP[[i]]<-var(Y)
LisG[[i]]<-manov(Yssp$W, Yssp$B, n,r)$G
newmx[i,] <- manov(Yssp$W, Yssp$B, n,r)$eige1
CorGeig[i,]<-eigen(manov(Yssp$W, Yssp$B, n,r)$G)$values
Gvarmat[i,]<-sort(diag(manov(Yssp$W, Yssp$B, n,r)$G),decreasing=TRUE)
varmat[i,]<-sort(diag(var(Y)),decreasing=TRUE)
Peig[i,]<-eigen(var(Y))$values
}
ProjPG<-matrix(0,nrow=k,ncol=p)
for (i in 1:k) {
for (j in 1:p){
ProjPG[i,j]<-t((eigen(LisP[[i]])$vectors[,j]))%*%LisG[[i]]%*%(eigen(LisP[[i]])$vectors[,j])
}
}
mypath <- file.path(paste(directory),paste("PGP","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(ProjPG,col="grey",boxwex=0.4,xlab="Eigenvector",Ylab="Projection of P through G")
abline(0,0,lty=2)
dev.off()
###boxplot for eigenvaluees and variance of P matrix
mypath <- file.path(paste(directory),paste("Peig&Var","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(Peig,col="grey",boxwex=0.4,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Phenotypic variance")
boxplot(varmat,add=TRUE, at=1.5:(p+0.5), boxwex=0.4,xaxt='n')
abline(mean(diag(SigmaE)+diag(SigmaA)),0,lty=2)
dev.off()
###boxplot for eigenvaluees and variance of G matrix
mypath <- file.path(paste(directory),paste("Geig&Var","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(newmx,col="grey",boxwex=0.4,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Genetic variance")
boxplot(Gvarmat,add=TRUE, at=1.5:(p+0.5), boxwex=0.4,xaxt='n')
abline(mean(diag(SigmaA)),0,lty=2)
dev.off()
# Peig and varmat not calculated using REML, newmx is REML estimate of eigenvalues
#new REML estimates of G var matrix
# Generates eigenvalues for 200 simulated G matrices.
#need to extract unconstrained REML estimates of variances for each trait.
# Need to generate density histograms to see if marchenko-Pastur distribution fits
#Values used from aug13 to generate limiting spectral distribution of eigenvalues for G
#No. lines
# no replicates per line
# no. traits measured
nH <- n-1
nE <- n*(r-1)
c1 <- p/nH
c2 <- p/nE
x <- 1
range <- c(-2,2)
step <- .05
spec <- genspec(c1,c2,x,range,step)
mypath <- file.path(paste(directory),paste("Geig","_Hist" , paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
hist(newmx,breaks=30, freq=FALSE,xlab="Eigenvalues",main='') # HISTOGRAM of G matrix values
lines(spec$argv/5,5*spec$dens)
dev.off()
mypath <- file.path(paste(directory),paste("Peig","_Hist" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
hist(Peig,breaks=30, freq=FALSE,xlab="Eigenvalues") #histogram of Pmatrix values
dev.off()
mypath <- file.path(paste(directory),paste("CorGeig","_Hist" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
hist(CorGeig,breaks=30, freq=FALSE,xlab="Eigenvalues") #histogram of Pmatrix values
dev.off()
mypath <- file.path(paste(directory),paste("REMLvsUncon","_boxplot" ,paste("_p",p,"n",n,"r",r,"k",k,sep=""), ".pdf", sep = ""))
pdf(file=mypath)
boxplot(newmx,col="grey",boxwex=0.4,xaxis=NULL,xlab="Trait or Eigenvector",ylab="Genetic Variance")
boxplot(remssl,add=TRUE, at=1.5:(p+0.5), boxwex=0.4,xaxt='n')
abline(mean(diag(SigmaE)+diag(SigmaA)),0,lty=2)
dev.off()
return(list(LisP=LisP,LisG=LisG,remssl=remssl))
}
l<-GPmatcomp(10,50,5,0*diag(10),diag(10),200,"H:/2014 summer project/Rscripts")
l<-GPmatcomp(10,50,5,0*diag(10),diag(10),200,"H:/2014 summer project/Rscripts")
l[[1]][[2]]
l[[2]][[2]]
l[[2]][[1]]
cov2cor(l[[2]][[1]])
l[[2]][[1]][2,1]/sqrt(l[[2]][[1]][1,1]*l[[2]][[1]][2,2])
l[[2]][[1]]
l[[3]][[1]]
l[[3]]
s<-sqrt(diag(l[[2]][[1]]))
s<-diag(l[[2]][[1]]
)
s
s<-diag(l[[2]][[1]])
s<-sort(diag(l[[2]][[1]],descending=TRUE)
)
s
?sort
s<-sort(diag(l[[2]][[1]],decreasing=TRUE))
s<-sort(diag(l[[2]][[1]]),decreasing=TRUE)
s
l
rm(list=ls())
25.50/20.24
9+7+8+6+5+4+3+2+1
c("abcdefghijklmnop","apigwasoncetold","atestforastring")
substr(c("abcdefghijklmnop","apigwasoncetold","atestforastring"),1,7)
c("abcdefghijklmnop","apigwasoncetold","atestforastring")["abcdefghijklmnop"]
c("abcdefghijklmnop","apigwasoncetold","atestforastring")
l<-read.csv("H:/OrdDatDes.csv")
l
l[,1]
l[c("And1996"),1]
l<-read.csv("H:/OrdDatDes.csv",stringsAsFactors=FALSE)
l
l[,1]
l["And1996",1]
l["And1996",]
l["And1997",1]
l["And1997",]
l[1,]
l[grepl(And1996,l),]
l[grepl("And1996",l),]
l[,]
grepl("And1996",l)
l
grepl("And1996",l[,1])
grepl(c("And1996","And1997"),l)
grepl(c("And1996",l)
)
c=list(and1996=1,andd1997=2)
c[and1996]
c["and1996"]
c[c("and1996","and1997)"]
c[c("and1996","and1997")]
c[c("and1996","andd1997")]
l<-data.frame(matrix(0,nrow=10,ncol=10))
l
l[,1]<-c("a","b","c","d","e","f","g","h","i","j")
l
l["a",]
l[a,]
l["a",1]
p<-list.files(path="C:/Users/s4284361/Documents/GitHub/Rproject/Pmatrices")
p<-p[grepl(".csv",p)] ### Takes only the csv files
p
substr(p,1,7)
q<-read.csv("C:/Users/s4284361/Documents/GitHub/Pitchers_PTRS2014/Data/MatrixIndexFinal.csv",header=TRUE) ## Reads in orderdatamatrix
p[1]
p[[1]]
substr(p[1]1,7)
substr(p[1],1,7)
substr(p[[1]],1,7)
substr(p[[1]],1,7)
q[grepl(substr(p[[1]],1,7),q)]
q[grepl(substr(p[[1]],1,7),q),]
grepl(substr(p[[1]],1,7),q)
grepl(substr(p[[1]],1,7),q[,1])
q[,1]
q<-read.csv("C:/Users/s4284361/Documents/GitHub/Pitchers_PTRS2014/Data/MatrixIndexFinal.csv",header=TRUE,stringAsFactors=FALSE) ## Reads in orderdatamatrix
q<-read.csv("C:/Users/s4284361/Documents/GitHub/Pitchers_PTRS2014/Data/MatrixIndexFinal.csv",header=TRUE,stringsAsFactors=FALSE) ## Reads in orderdatamatrix
q
q[,1]
q[,2]
q[,3]
q[,1]
q
q[,4]
grepl(substr(p[[1]],1,7),q[,4])
p[[1]]
q[,4][,5]
q[,4][5]
q[,4][4]
q[,4][3]
q[,4][2]
q[,4][1]
q[grepl(substr(p[[1]],1,7),q[,4]),]
q<-read.csv("H:/OrdDatDes.csv",header=TRUE,stringsAsFactors=FALSE) ## Reads in orderdatamatrix
q[,1]
q[grepl(substr(p[[1]],1,7),q[,1]),]
dir="C:/Users/s4284361/Documents/GitHub/Rproject/Pmatrices"
Pmatindex<-function(dir) { ## dir ="C:/Users/s4284361/Documents/GitHub/Rproject/Pmatrices"
p<-list.files(path=dir)
p<-p[grepl(".csv",p)] ### Takes only the csv files
q<-read.csv("H:/OrdDatDes.csv",header=TRUE,stringsAsFactors=FALSE) ## Reads in orderdatamatrix
for (i in 1:length(p)) {
z[i,]<-q[grepl(substr(p[[i]],1,7),q[,1]),]
}
write.csv("path=C:/Users/s4284361/Documents/GitHub/Rproject",x=z)
}
Pmatindex(dir)
q
length(q)
names(q)
Pmatindex<-function(dir) { ## dir ="C:/Users/s4284361/Documents/GitHub/Rproject/Pmatrices"
p<-list.files(path=dir)
p<-p[grepl(".csv",p)] ### Takes only the csv files
q<-read.csv("H:/OrdDatDes.csv",header=TRUE,stringsAsFactors=FALSE) ## Reads in orderdatamatrix
z<-data.frame(matrix(NA,nrow=length(p),ncol=length(q)))
for (i in 1:length(p)) {
z[i,]<-q[grepl(substr(p[[i]],1,7),q[,1]),]
names(z)<-names(q)
}
write.csv("path=C:/Users/s4284361/Documents/GitHub/Rproject",x=z)
}
Pmatindex(dir)
Pmatindex<-function(dir) { ## dir ="C:/Users/s4284361/Documents/GitHub/Rproject/Pmatrices"
p<-list.files(path=dir)
p<-p[grepl(".csv",p)] ### Takes only the csv files
q<-read.csv("H:/OrdDatDes.csv",header=TRUE,stringsAsFactors=FALSE) ## Reads in orderdatamatrix
z<-data.frame(matrix(NA,nrow=length(p),ncol=length(q)))
for (i in 1:length(p)) {
z[i,]<-q[grepl(substr(p[[i]],1,7),q[,1]),]
names(z)<-names(q)
}
setwd("path=C:/Users/s4284361/Documents/GitHub/Rproject")
write.csv("Pmatindex.csv",x=z)
}
Pmatindex(dir)
setwd(path="C:/Users/s4284361/Documents/GitHub/Rproject")
setwd
?setwd
setwd("C:/Users/s4284361/Documents/GitHub/Rproject")
Pmatindex<-function(dir) { ## dir ="C:/Users/s4284361/Documents/GitHub/Rproject/Pmatrices"
p<-list.files(path=dir)
p<-p[grepl(".csv",p)] ### Takes only the csv files
q<-read.csv("H:/OrdDatDes.csv",header=TRUE,stringsAsFactors=FALSE) ## Reads in orderdatamatrix
z<-data.frame(matrix(NA,nrow=length(p),ncol=length(q)))
for (i in 1:length(p)) {
z[i,]<-q[grepl(substr(p[[i]],1,7),q[,1]),]
names(z)<-names(q)
}
setwd("C:/Users/s4284361/Documents/GitHub/Rproject")
write.csv("Pmatindex.csv",x=z)
}
Pmatindex(dir)
Pmatindex<-function(dir) { ## dir ="C:/Users/s4284361/Documents/GitHub/Rproject/Pmatrices"
p<-list.files(path=dir)
p<-p[grepl(".csv",p)] ### Takes only the csv files
q<-read.csv("H:/OrdDatDes.csv",header=TRUE,stringsAsFactors=FALSE) ## Reads in orderdatamatrix
z<-data.frame(matrix(NA,nrow=length(p),ncol=length(q)))
for (i in 1:length(p)) {
z[i,]<-q[grepl(substr(p[[i]],1,7),q[,1]),]
z[i,1]<-p[[i]]
}
names(z)<-names(q)
setwd("C:/Users/s4284361/Documents/GitHub/Rproject")
write.csv("Pmatindex.csv",x=z)
}
Pmatindex(dir)
names(p[,1])
names(p[q[,1]])
names(p[q)
names(pq)
names(q)
names(q[,1])
names(q)
nam<-names(q)
nam
nam[1]<-"matrix"
nam
Pmatindex<-function(dir) { ## dir ="C:/Users/s4284361/Documents/GitHub/Rproject/Pmatrices"
p<-list.files(path=dir)
p<-p[grepl(".csv",p)] ### Takes only the csv files
q<-read.csv("H:/OrdDatDes.csv",header=TRUE,stringsAsFactors=FALSE) ## Reads in orderdatamatrix
z<-data.frame(matrix(NA,nrow=length(p),ncol=length(q)))
for (i in 1:length(p)) {
z[i,]<-q[grepl(substr(p[[i]],1,7),q[,1]),]
z[i,1]<-p[[i]]
}
nam<-names(q)
nam[1]<-"Pmatrix"
names(z)<-names(q)
setwd("C:/Users/s4284361/Documents/GitHub/Rproject")
write.csv("Pmatindex.csv",x=z)
}
Pmatindex
Pmatindex(dir)
Pmatindex(dir)
Pmatindex<-function(dir) { ## dir ="C:/Users/s4284361/Documents/GitHub/Rproject/Pmatrices"
p<-list.files(path=dir)
p<-p[grepl(".csv",p)] ### Takes only the csv files
q<-read.csv("H:/OrdDatDes.csv",header=TRUE,stringsAsFactors=FALSE) ## Reads in orderdatamatrix
z<-data.frame(matrix(NA,nrow=length(p),ncol=length(q)))
for (i in 1:length(p)) {
z[i,]<-q[grepl(substr(p[[i]],1,7),q[,1]),]
z[i,1]<-substr(p[[i]],1,9)
}
nam<-names(q)
nam[1]<-"Pmatrix"
names(z)<-names(q)
setwd("C:/Users/s4284361/Documents/GitHub/Rproject")
write.csv("Pmatindex.csv",x=z)
}
Pmatindex(dir)
Pmatindex(dir)
?write.csv
nam
Pmatindex<-function(dir) { ## dir ="C:/Users/s4284361/Documents/GitHub/Rproject/Pmatrices"
p<-list.files(path=dir)
p<-p[grepl(".csv",p)] ### Takes only the csv files
q<-read.csv("H:/OrdDatDes.csv",header=TRUE,stringsAsFactors=FALSE) ## Reads in orderdatamatrix
z<-data.frame(matrix(NA,nrow=length(p),ncol=length(q)))
for (i in 1:length(p)) {
z[i,]<-q[grepl(substr(p[[i]],1,7),q[,1]),]
z[i,1]<-substr(p[[i]],1,9)
}
nam<-names(q)
nam[1]<-"Pmatrix"
names(z)<-nam
setwd("C:/Users/s4284361/Documents/GitHub/Rproject")
write.csv("Pmatindex.csv",x=z,row.names=FALSE)
}
Pmatindex)dir
Pmatindex(dir)
Pmatindex(dir)
q
q[,16]
q$Gmatrix<-rep(NA,length(q[,16]))
q[,17]
q
q<-read.csv("H:/OrdDatDes.csv",header=TRUE,stringsAsFactors=FALSE) ## Reads in orderdatamatrix
q$GmatID<-rep(NA,length(q[,16]))
q[,17]
Pmatindex<-function(dir) { ## dir ="C:/Users/s4284361/Documents/GitHub/Rproject/Pmatrices"
p<-list.files(path=dir)
p<-p[grepl(".csv",p)] ### Takes only the csv files
q<-read.csv("H:/OrdDatDes.csv",header=TRUE,stringsAsFactors=FALSE) ## Reads in orderdatamatrix
z<-data.frame(matrix(NA,nrow=length(p),ncol=length(q)))
for (i in 1:length(p)) {
z[i,]<-q[grepl(substr(p[[i]],1,7),q[,1]),]
z[i,1]<-substr(p[[i]],1,9)
}
nam<-names(q)
nam[1]<-"Pmatrix"
names(z)<-nam
z$GmatId<-rep(NA,length(z[,16]))
setwd("C:/Users/s4284361/Documents/GitHub/Rproject")
write.csv("Pmatindex.csv",x=z,row.names=FALSE)
}
Pmatindex(dir)
rm(list=ls())
